import path from 'node:path';
import { describe, expect, layer, vi } from '@effect/vitest';
import { Effect } from 'effect';
import { FileSystem } from '@effect/platform';
import { cli, TestLive } from 'test/__utils__';
import { makeTestToolkits } from 'test/__utils__/models/toolkits';
import { NodeProcess } from 'src/services/node-process';

describe('CLI: composio py generate', () => {
  const appClientData = {
    toolkits: makeTestToolkits([
      {
        name: 'Gmail',
        slug: 'gmail',
      },
      {
        name: 'Slack',
        slug: 'slack',
      },
    ]),
    tools: ['GMAIL_CREATE_EMAIL_DRAFT', 'GMAIL_DELETE_MESSAGE', 'GMAIL_FETCH_EMAILS'],
    triggerTypes: ['GMAIL_NEW_GMAIL_MESSAGE'],
  };

  layer(
    TestLive({
      fixture: 'python-project',
      toolkitsData: appClientData,
    })
  )(it => {
    describe('[Given] valid fetched app data', () => {
      it.effect(
        '[Given] no arguments [Then] it generates type stubs relative to the cache directory',
        () =>
          Effect.gen(function* () {
            const process = yield* NodeProcess;
            const cwd = process.cwd;
            const fs = yield* FileSystem.FileSystem;

            vi.stubEnv('COMPOSIO_CACHE_DIR', cwd);

            const args = ['py', 'generate'];
            yield* cli(args);

            const outputDir = path.join(cwd, '.generated', 'composio-py');

            const gmailSourceCode = yield* fs.readFileString(path.join(outputDir, 'gmail.py'));
            const slackSourceCode = yield* fs.readFileString(path.join(outputDir, 'slack.py'));

            expect(gmailSourceCode).toMatchInlineSnapshot(`
              "# Auto-generated by Composio CLI via \`composio py generate\`.
              # Do not modify manually.

              class GMAIL:
                  """Map of Composio's GMAIL toolkit."""

                  slug: str = "gmail"

                  class tools:
                      CREATE_EMAIL_DRAFT = "GMAIL_CREATE_EMAIL_DRAFT"
                      DELETE_MESSAGE = "GMAIL_DELETE_MESSAGE"
                      FETCH_EMAILS = "GMAIL_FETCH_EMAILS"

                  class triggers:
                      NEW_GMAIL_MESSAGE = "GMAIL_NEW_GMAIL_MESSAGE"
              "
            `);
            expect(slackSourceCode).toMatchInlineSnapshot(`
              "# Auto-generated by Composio CLI via \`composio py generate\`.
              # Do not modify manually.

              class SLACK:
                  """Map of Composio's SLACK toolkit."""

                  slug: str = "slack"

                  class tools:
                      pass

                  class triggers:
                      pass
              "
            `);
          })
      );

      it.effect(
        '[Given] --output-dir [Then] it generates type stubs relative to the given output directory',
        () =>
          Effect.gen(function* () {
            const process = yield* NodeProcess;
            const cwd = process.cwd;
            const fs = yield* FileSystem.FileSystem;

            const outputDirArg = path.join('.generated', 'composio-py');

            const args = ['py', 'generate', '--output-dir', outputDirArg];
            yield* cli(args);

            const outputDir = path.join(cwd, outputDirArg);

            const gmailSourceCode = yield* fs.readFileString(path.join(outputDir, 'gmail.py'));
            const slackSourceCode = yield* fs.readFileString(path.join(outputDir, 'slack.py'));

            expect(gmailSourceCode).toMatchInlineSnapshot(`
              "# Auto-generated by Composio CLI via \`composio py generate\`.
              # Do not modify manually.

              class GMAIL:
                  """Map of Composio's GMAIL toolkit."""

                  slug: str = "gmail"

                  class tools:
                      CREATE_EMAIL_DRAFT = "GMAIL_CREATE_EMAIL_DRAFT"
                      DELETE_MESSAGE = "GMAIL_DELETE_MESSAGE"
                      FETCH_EMAILS = "GMAIL_FETCH_EMAILS"

                  class triggers:
                      NEW_GMAIL_MESSAGE = "GMAIL_NEW_GMAIL_MESSAGE"
              "
            `);
            expect(slackSourceCode).toMatchInlineSnapshot(`
              "# Auto-generated by Composio CLI via \`composio py generate\`.
              # Do not modify manually.

              class SLACK:
                  """Map of Composio's SLACK toolkit."""

                  slug: str = "slack"

                  class tools:
                      pass

                  class triggers:
                      pass
              "
            `);
          })
      );
    });
  });
});
