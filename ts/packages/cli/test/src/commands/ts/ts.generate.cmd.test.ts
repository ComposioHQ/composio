import path from 'node:path';
import { describe, expect, layer, vi } from '@effect/vitest';
import { Effect } from 'effect';
import { FileSystem } from '@effect/platform';
import { cli, TestLive } from 'test/__utils__';
import { makeTestToolkits } from 'test/__utils__/models/toolkits';
import { NodeProcess } from 'src/services/node-process';
import { assertTypeScriptIsValid } from 'test/__utils__/typescript-compiler';

describe('CLI: composio ts generate', () => {
  const appClientData = {
    toolkits: makeTestToolkits([
      {
        name: 'Gmail',
        slug: 'gmail',
      },
      {
        name: 'Slack',
        slug: 'slack',
      },
    ]),
    tools: ['GMAIL_CREATE_EMAIL_DRAFT', 'GMAIL_DELETE_MESSAGE', 'GMAIL_FETCH_EMAILS'],
    triggerTypes: ['GMAIL_NEW_GMAIL_MESSAGE'],
  };

  layer(
    TestLive({
      fixture: 'typescript-project',
      toolkitsData: appClientData,
    })
  )(it => {
    describe('[Given] valid fetched app data', () => {
      it.effect(
        '[Given] no arguments [Then] it generates type stubs relative to the cache directory',
        () =>
          Effect.gen(function* () {
            const process = yield* NodeProcess;
            const cwd = process.cwd;
            const fs = yield* FileSystem.FileSystem;

            vi.stubEnv('COMPOSIO_CACHE_DIR', cwd);

            const args = ['ts', 'generate'];
            yield* cli(args);

            const outputDir = path.join(cwd, '.generated', 'composio-ts');

            const gmailSourceCode = yield* fs.readFileString(path.join(outputDir, 'gmail.ts'));
            const slackSourceCode = yield* fs.readFileString(path.join(outputDir, 'slack.ts'));
            const indexSourceCode = yield* fs.readFileString(path.join(outputDir, 'index.ts'));

            expect(gmailSourceCode).toMatchInlineSnapshot(`
            "/**
             * Map of Composio's GMAIL toolkit.
             */
            export const GMAIL = {
              slug: "gmail",
              tools: {
                CREATE_EMAIL_DRAFT: "GMAIL_CREATE_EMAIL_DRAFT",
                DELETE_MESSAGE: "GMAIL_DELETE_MESSAGE",
                FETCH_EMAILS: "GMAIL_FETCH_EMAILS",
              },
              triggerTypes: {
                NEW_GMAIL_MESSAGE: "GMAIL_NEW_GMAIL_MESSAGE",
              },
            }
            "
          `);
            expect(slackSourceCode).toMatchInlineSnapshot(`
            "/**
             * Map of Composio's SLACK toolkit.
             */
            export const SLACK = {
              slug: "slack",
              tools: {},
              triggerTypes: {},
            }
            "
          `);
            expect(indexSourceCode).toMatchInlineSnapshot(`
            "/**
             * Auto-generated by Composio CLI. Do not modify manually.
             */

            import { GMAIL } from "./gmail.ts"
            import { SLACK } from "./slack.ts"

            /**
             * Map of Composio toolkits to actions.
             */
            export const composio = {
              GMAIL: GMAIL,
              SLACK: SLACK,
            }

            /**
             * Type declarations
             */

            /**
             * Union of all available toolkits.
             */
            export type Toolkit = 
              | "GMAIL"
              | "SLACK"
              
            /**
             * Given a toolkit, returns the tools available for that toolkit.
             */
            export type ToolsByToolkit<Toolkit extends keyof (typeof composio)> = typeof composio[Toolkit]

            "
          `);

            assertTypeScriptIsValid({ files: { './gmail.ts': gmailSourceCode } });
            assertTypeScriptIsValid({ files: { './slack.ts': slackSourceCode } });
            assertTypeScriptIsValid({
              files: {
                './index.ts': indexSourceCode,
                './gmail.ts': gmailSourceCode,
                './slack.ts': slackSourceCode,
              },
            });
          })
      );

      it.effect(
        '[Given] --output-dir [Then] it generates type stubs relative to the given output directory',
        () =>
          Effect.gen(function* () {
            const process = yield* NodeProcess;
            const cwd = process.cwd;
            const fs = yield* FileSystem.FileSystem;

            const outputDirArg = path.join('.generated', 'composio-ts');

            const args = ['ts', 'generate', '--output-dir', outputDirArg];
            yield* cli(args);

            const outputDir = path.join(cwd, outputDirArg);

            const gmailSourceCode = yield* fs.readFileString(path.join(outputDir, 'gmail.ts'));
            const slackSourceCode = yield* fs.readFileString(path.join(outputDir, 'slack.ts'));
            const indexSourceCode = yield* fs.readFileString(path.join(outputDir, 'index.ts'));

            expect(gmailSourceCode).toMatchInlineSnapshot(`
            "/**
             * Map of Composio's GMAIL toolkit.
             */
            export const GMAIL = {
              slug: "gmail",
              tools: {
                CREATE_EMAIL_DRAFT: "GMAIL_CREATE_EMAIL_DRAFT",
                DELETE_MESSAGE: "GMAIL_DELETE_MESSAGE",
                FETCH_EMAILS: "GMAIL_FETCH_EMAILS",
              },
              triggerTypes: {
                NEW_GMAIL_MESSAGE: "GMAIL_NEW_GMAIL_MESSAGE",
              },
            }
            "
          `);
            expect(slackSourceCode).toMatchInlineSnapshot(`
            "/**
             * Map of Composio's SLACK toolkit.
             */
            export const SLACK = {
              slug: "slack",
              tools: {},
              triggerTypes: {},
            }
            "
          `);
            expect(indexSourceCode).toMatchInlineSnapshot(`
            "/**
             * Auto-generated by Composio CLI. Do not modify manually.
             */

            import { GMAIL } from "./gmail.ts"
            import { SLACK } from "./slack.ts"

            /**
             * Map of Composio toolkits to actions.
             */
            export const composio = {
              GMAIL: GMAIL,
              SLACK: SLACK,
            }

            /**
             * Type declarations
             */

            /**
             * Union of all available toolkits.
             */
            export type Toolkit = 
              | "GMAIL"
              | "SLACK"
              
            /**
             * Given a toolkit, returns the tools available for that toolkit.
             */
            export type ToolsByToolkit<Toolkit extends keyof (typeof composio)> = typeof composio[Toolkit]

            "
          `);

            assertTypeScriptIsValid({ files: { './gmail.ts': gmailSourceCode } });
            assertTypeScriptIsValid({ files: { './slack.ts': slackSourceCode } });
            assertTypeScriptIsValid({
              files: {
                './index.ts': indexSourceCode,
                './gmail.ts': gmailSourceCode,
                './slack.ts': slackSourceCode,
              },
            });
          })
      );

      it.effect('[Given] --single-file [Then] it generates type stubs in a single file', () =>
        Effect.gen(function* () {
          const process = yield* NodeProcess;
          const cwd = process.cwd;
          const fs = yield* FileSystem.FileSystem;

          vi.stubEnv('COMPOSIO_CACHE_DIR', cwd);

          const args = ['ts', 'generate', '--single-file'];
          yield* cli(args);

          const outputDir = path.join(cwd, '.generated', 'composio-ts');

          expect(yield* fs.exists(path.join(outputDir, 'index.ts'))).toBe(true);

          const indexSourceCode = yield* fs.readFileString(path.join(outputDir, 'index.ts'));

          expect(indexSourceCode).toMatchInlineSnapshot(`
            "/**
             * Auto-generated by Composio CLI. Do not modify manually.
             */

            /**
             * Map of Composio's GMAIL toolkit.
             */
            export const GMAIL = {
              slug: "gmail",
              tools: {
                CREATE_EMAIL_DRAFT: "GMAIL_CREATE_EMAIL_DRAFT",
                DELETE_MESSAGE: "GMAIL_DELETE_MESSAGE",
                FETCH_EMAILS: "GMAIL_FETCH_EMAILS",
              },
              triggerTypes: {
                NEW_GMAIL_MESSAGE: "GMAIL_NEW_GMAIL_MESSAGE",
              },
            }

            /**
             * Map of Composio's SLACK toolkit.
             */
            export const SLACK = {
              slug: "slack",
              tools: {},
              triggerTypes: {},
            }

            /**
             * Map of Composio toolkits to actions.
             */
            export const composio = {
              GMAIL: GMAIL,
              SLACK: SLACK,
            }

            /**
             * Type declarations
             */

            /**
             * Union of all available toolkits.
             */
            export type Toolkit = 
              | "GMAIL"
              | "SLACK"
              
            /**
             * Given a toolkit, returns the tools available for that toolkit.
             */
            export type ToolsByToolkit<Toolkit extends keyof (typeof composio)> = typeof composio[Toolkit]


            "
          `);

          assertTypeScriptIsValid({ files: { './index.ts': indexSourceCode } });
        })
      );
    });
  });
});
