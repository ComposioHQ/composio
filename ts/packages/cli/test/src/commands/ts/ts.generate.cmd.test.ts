import path from 'node:path';
import { describe, expect, layer, vi } from '@effect/vitest';
import { Effect, Fiber } from 'effect';
import { FileSystem } from '@effect/platform';
import { cli, TestLive } from 'test/__utils__';
import { makeTestToolkits } from 'test/__utils__/models/toolkits';
import { NodeProcess } from 'src/services/node-process';
import { assertTypeScriptIsValid } from 'test/__utils__/typescript-compiler';
import { ComposioCorePkgNotFound } from 'src/commands/ts/commands/ts.generate.cmd';

describe('CLI: composio ts generate', () => {
  const appClientData = {
    toolkits: makeTestToolkits([
      {
        name: 'Gmail',
        slug: 'gmail',
      },
      {
        name: 'Slack',
        slug: 'slack',
      },
    ]),
    tools: ['GMAIL_CREATE_EMAIL_DRAFT', 'GMAIL_DELETE_MESSAGE', 'GMAIL_FETCH_EMAILS'],
    triggerTypes: ['GMAIL_NEW_GMAIL_MESSAGE'],
  };

  describe('[Given] valid fetched app data', () => {
    layer(
      TestLive({
        fixture: 'typescript-project-with-composio-core',
        toolkitsData: appClientData,
      })
    )(it => {
      describe('[Given] `@composio/core` already installed', () => {
        it.effect(
          '[Given] no args [Then] it generates types in `node_modules/@composio/core/generated`',
          () =>
            Effect.gen(function* () {
              const process = yield* NodeProcess;
              const cwd = process.cwd;
              const fs = yield* FileSystem.FileSystem;

              // Create the @composio/core/generated directory structure as if installed
              const nodeModulesDir = path.join(cwd, 'node_modules', '@composio', 'core');
              const generatedDir = path.join(nodeModulesDir, 'generated');
              yield* fs.makeDirectory(nodeModulesDir, { recursive: true });
              yield* fs.makeDirectory(generatedDir, { recursive: true });

              const outputDir = path.join(cwd, 'node_modules', '@composio', 'core', 'generated');
              const args = ['ts', 'generate'];
              yield* cli(args);

              const gmailSourceCode = yield* fs.readFileString(path.join(outputDir, 'gmail.ts'));
              const slackSourceCode = yield* fs.readFileString(path.join(outputDir, 'slack.ts'));
              const indexSourceCode = yield* fs.readFileString(path.join(outputDir, 'index.ts'));

              expect(gmailSourceCode).toMatchInlineSnapshot(`
              "/**
               * Map of Composio's GMAIL toolkit.
               */
              export const GMAIL = {
                slug: "gmail",
                tools: {
                  CREATE_EMAIL_DRAFT: "GMAIL_CREATE_EMAIL_DRAFT",
                  DELETE_MESSAGE: "GMAIL_DELETE_MESSAGE",
                  FETCH_EMAILS: "GMAIL_FETCH_EMAILS",
                },
                triggerTypes: {
                  NEW_GMAIL_MESSAGE: "GMAIL_NEW_GMAIL_MESSAGE",
                },
              }
              "
            `);
              expect(slackSourceCode).toMatchInlineSnapshot(`
              "/**
               * Map of Composio's SLACK toolkit.
               */
              export const SLACK = {
                slug: "slack",
                tools: {},
                triggerTypes: {},
              }
              "
            `);
              expect(indexSourceCode).toMatchInlineSnapshot(`
                "/**
                 * Auto-generated by Composio CLI. Do not modify manually.
                 */

                import { GMAIL } from "./gmail.ts"
                import { SLACK } from "./slack.ts"

                /**
                 * Map of Composio toolkits to actions.
                 */
                export const composio = {
                  GMAIL: GMAIL,
                  SLACK: SLACK,
                }

                /**
                 * Type declarations
                 */

                /**
                 * Union of all available toolkits.
                 */
                export type Toolkit = 
                  | "GMAIL"
                  | "SLACK"
                  
                /**
                 * Given a toolkit, returns the tools available for that toolkit.
                 */
                export type ToolsByToolkit<Toolkit extends keyof (typeof composio)> = typeof composio[Toolkit]

                "
              `);

              assertTypeScriptIsValid({ files: { './gmail.ts': gmailSourceCode } });
              assertTypeScriptIsValid({ files: { './slack.ts': slackSourceCode } });
              assertTypeScriptIsValid({
                files: {
                  './index.ts': indexSourceCode,
                  './gmail.ts': gmailSourceCode,
                  './slack.ts': slackSourceCode,
                },
              });
            })
        );

        it.effect(
          '[Given] --output-dir [Then] it generates type stubs relative to the given output directory',
          () =>
            Effect.gen(function* () {
              const process = yield* NodeProcess;
              const cwd = process.cwd;
              const fs = yield* FileSystem.FileSystem;

              const outputDir = path.join(cwd, '.generated', 'composio-ts');

              const args = ['ts', 'generate', '--output-dir', outputDir];
              yield* cli(args);

              const gmailSourceCode = yield* fs.readFileString(path.join(outputDir, 'gmail.ts'));
              const slackSourceCode = yield* fs.readFileString(path.join(outputDir, 'slack.ts'));
              const indexSourceCode = yield* fs.readFileString(path.join(outputDir, 'index.ts'));

              expect(gmailSourceCode).toMatchInlineSnapshot(`
              "/**
               * Map of Composio's GMAIL toolkit.
               */
              export const GMAIL = {
                slug: "gmail",
                tools: {
                  CREATE_EMAIL_DRAFT: "GMAIL_CREATE_EMAIL_DRAFT",
                  DELETE_MESSAGE: "GMAIL_DELETE_MESSAGE",
                  FETCH_EMAILS: "GMAIL_FETCH_EMAILS",
                },
                triggerTypes: {
                  NEW_GMAIL_MESSAGE: "GMAIL_NEW_GMAIL_MESSAGE",
                },
              }
              "
            `);
              expect(slackSourceCode).toMatchInlineSnapshot(`
              "/**
               * Map of Composio's SLACK toolkit.
               */
              export const SLACK = {
                slug: "slack",
                tools: {},
                triggerTypes: {},
              }
              "
            `);
              expect(indexSourceCode).toMatchInlineSnapshot(`
                "/**
                 * Auto-generated by Composio CLI. Do not modify manually.
                 */

                import { GMAIL } from "./gmail.ts"
                import { SLACK } from "./slack.ts"

                /**
                 * Map of Composio toolkits to actions.
                 */
                export const composio = {
                  GMAIL: GMAIL,
                  SLACK: SLACK,
                }

                /**
                 * Type declarations
                 */

                /**
                 * Union of all available toolkits.
                 */
                export type Toolkit = 
                  | "GMAIL"
                  | "SLACK"
                  
                /**
                 * Given a toolkit, returns the tools available for that toolkit.
                 */
                export type ToolsByToolkit<Toolkit extends keyof (typeof composio)> = typeof composio[Toolkit]

                "
              `);

              assertTypeScriptIsValid({ files: { './gmail.ts': gmailSourceCode } });
              assertTypeScriptIsValid({ files: { './slack.ts': slackSourceCode } });
              assertTypeScriptIsValid({
                files: {
                  './index.ts': indexSourceCode,
                  './gmail.ts': gmailSourceCode,
                  './slack.ts': slackSourceCode,
                },
              });
            })
        );
        it.effect('[Given] --single-file [Then] it generates type stubs in a single file', () =>
          Effect.gen(function* () {
            const process = yield* NodeProcess;
            const cwd = process.cwd;
            const fs = yield* FileSystem.FileSystem;

            vi.stubEnv('COMPOSIO_CACHE_DIR', cwd);

            const args = ['ts', 'generate', '--single-file'];
            yield* cli(args);

            const outputDir = path.join(cwd, '.generated', 'composio-ts');

            expect(yield* fs.exists(path.join(outputDir, 'index.ts'))).toBe(true);

            const indexSourceCode = yield* fs.readFileString(path.join(outputDir, 'index.ts'));

            expect(indexSourceCode).toMatchInlineSnapshot(`
                "/**
                 * Auto-generated by Composio CLI. Do not modify manually.
                 */

                import { GMAIL } from "./gmail.ts"
                import { SLACK } from "./slack.ts"

                /**
                 * Map of Composio toolkits to actions.
                 */
                export const composio = {
                  GMAIL: GMAIL,
                  SLACK: SLACK,
                }

                /**
                 * Type declarations
                 */

                /**
                 * Union of all available toolkits.
                 */
                export type Toolkit = 
                  | "GMAIL"
                  | "SLACK"
                  
                /**
                 * Given a toolkit, returns the tools available for that toolkit.
                 */
                export type ToolsByToolkit<Toolkit extends keyof (typeof composio)> = typeof composio[Toolkit]

                "
              `);

            assertTypeScriptIsValid({ files: { './index.ts': indexSourceCode } });
          })
        );
      });
    });

    describe('[Given] `@composio/core` not installed', () => {
      layer(
        TestLive({
          fixture: 'typescript-project',
          toolkitsData: appClientData,
        })
      )(it => {
        it.effect('[Given] no custom output dir [Then] [Then] it raises an error', () =>
          Effect.gen(function* () {
            const args = ['ts', 'generate'];

            const result = yield* cli(args).pipe(Effect.catchAll(e => Effect.succeed(e)));

            expect(result).toEqual(
              new ComposioCorePkgNotFound({
                message: '@composio/core not found',
                cause: '@composio/core not installed',
                fix: 'Install @composio/core with `npm install -S @composio/core`, or specify an output directory using `--output-dir`',
              })
            );
          })
        );
      });
    });
  });
});
