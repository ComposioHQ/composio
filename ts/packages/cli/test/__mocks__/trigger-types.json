[
  {
    "config": {
      "properties": {
        "project_gid": {
          "description": "Global ID oasdfasdff your project",
          "title": "Project Gid",
          "type": "string"
        },
        "workspace_gid": {
          "description": "Global ID of your workspace",
          "title": "Workspace Gid",
          "type": "string"
        }
      },
      "required": ["workspace_gid", "project_gid"],
      "title": "TaskTriggerConfig",
      "type": "object"
    },
    "description": "Task Trigger",
    "instructions": "",
    "name": "Task Trigger",
    "payload": {
      "properties": {
        "events": {
          "description": "List of events that triggered the webhook",
          "items": {},
          "title": "Events",
          "type": "array"
        }
      },
      "required": ["events"],
      "title": "TaskTriggerPayload",
      "type": "object"
    },
    "slug": "ASANA_TASK_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "assignment_id": {
          "description": "The ID of the assignment to monitor for grading activity.",
          "title": "Assignment Id",
          "type": "integer"
        },
        "course_id": {
          "description": "The ID of the Canvas course containing the assignment.",
          "title": "Course Id",
          "type": "integer"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "required": ["course_id", "assignment_id"],
      "title": "CanvasAssignmentGradedConfig",
      "type": "object"
    },
    "description": "Polls Canvas for newly graded submissions for a specific assignment.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n    1. Provide the course ID - this can be found in the URL when viewing the course in Canvas.\n       For example, in \"https://canvas.instructure.com/courses/12345\", the course ID is 12345.\n\n    2. Provide the assignment ID - this can be found in the URL when viewing the assignment.\n       For example, in \"https://canvas.instructure.com/courses/12345/assignments/67890\",\n       the assignment ID is 67890.\n    ",
    "name": "Canvas Assignment Graded",
    "payload": {
      "properties": {
        "grade": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The grade for the submission.",
          "title": "Grade"
        },
        "is_graded": {
          "description": "Whether the submission has been graded.",
          "title": "Is Graded",
          "type": "boolean"
        },
        "user_id": {
          "description": "The ID of the user who submitted the assignment.",
          "title": "User Id",
          "type": "integer"
        }
      },
      "required": ["user_id", "is_graded"],
      "title": "CanvasGradedSubmission",
      "type": "object"
    },
    "slug": "CANVAS_ASSIGNMENT_GRADED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "assignment_id": {
          "description": "The ID of the assignment to monitor for new submissions.",
          "title": "Assignment Id",
          "type": "integer"
        },
        "course_id": {
          "description": "The ID of the Canvas course containing the assignment.",
          "title": "Course Id",
          "type": "integer"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "required": ["course_id", "assignment_id"],
      "title": "CanvasNewSubmissionConfig",
      "type": "object"
    },
    "description": "Polls Canvas for new submissions to a specific assignment.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n    1. Provide the course ID - this can be found in the URL when viewing the course in Canvas.\n       For example, in \"https://canvas.instructure.com/courses/12345\", the course ID is 12345.\n\n    2. Provide the assignment ID - this can be found in the URL when viewing the assignment.\n       For example, in \"https://canvas.instructure.com/courses/12345/assignments/67890\",\n       the assignment ID is 67890.\n       \n    3. This trigger will fire whenever a new submission is made to the specified assignment.\n    ",
    "name": "New Canvas Assignment Submission",
    "payload": {
      "properties": {
        "grade": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The grade, if graded.",
          "title": "Grade"
        },
        "id": { "description": "The ID of the submission.", "title": "Id", "type": "integer" },
        "late": {
          "description": "Whether the submission was late.",
          "title": "Late",
          "type": "boolean"
        },
        "preview_url": {
          "description": "URL to preview the submission.",
          "title": "Preview Url",
          "type": "string"
        },
        "submission_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of submission (online_text_entry, online_upload, etc).",
          "title": "Submission Type"
        },
        "submitted_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the submission was made.",
          "title": "Submitted At"
        },
        "user_id": {
          "description": "The ID of the user who submitted the assignment.",
          "title": "User Id",
          "type": "integer"
        },
        "workflow_state": {
          "description": "The state of the submission (submitted, unsubmitted, graded, etc).",
          "title": "Workflow State",
          "type": "string"
        }
      },
      "required": ["id", "user_id", "workflow_state", "late", "preview_url"],
      "title": "CanvasSubmission",
      "type": "object"
    },
    "slug": "CANVAS_NEW_ASSIGNMENT_SUBMISSION_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "course_id": {
          "description": "The ID of the Canvas course containing the discussion.",
          "title": "Course Id",
          "type": "integer"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "topic_id": {
          "description": "The ID of the discussion topic to monitor for new messages.",
          "title": "Topic Id",
          "type": "integer"
        }
      },
      "required": ["course_id", "topic_id"],
      "title": "CanvasDiscussionMessageConfigSchema",
      "type": "object"
    },
    "description": "Polls a Canvas discussion topic for new messages.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    1. Provide the course ID - this can be found in the URL when viewing the course in Canvas.\n       For example, in \"https://canvas.instructure.com/courses/12345\", the course ID is 12345.\n\n    2. Provide the discussion topic ID - this can be found in the URL when viewing the discussion topic.\n       For example, in \"https://canvas.instructure.com/courses/12345/discussion_topics/67890\",\n       the topic ID is 67890.\n\n    3. This trigger will fire whenever new messages are posted to the discussion.\n    ",
    "name": "New Canvas Discussion Message",
    "payload": {
      "properties": {
        "course_id": {
          "description": "The course ID the discussion belongs to.",
          "title": "Course Id",
          "type": "integer"
        },
        "created_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the entry was created.",
          "title": "Created At"
        },
        "id": {
          "description": "The ID of the discussion entry.",
          "title": "Id",
          "type": "integer"
        },
        "message": {
          "default": "",
          "description": "The content of the discussion entry.",
          "title": "Message",
          "type": "string"
        },
        "parent_id": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "default": null,
          "description": "Parent entry ID if this is a reply.",
          "title": "Parent Id"
        },
        "raw_entry": {
          "description": "The raw API response for this entry.",
          "title": "Raw Entry",
          "type": "object"
        },
        "topic_id": {
          "description": "The discussion topic ID this entry belongs to.",
          "title": "Topic Id",
          "type": "integer"
        },
        "updated_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the entry was last updated.",
          "title": "Updated At"
        },
        "user_id": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "default": null,
          "description": "User ID of the entry author.",
          "title": "User Id"
        },
        "user_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The name of the user who posted the entry.",
          "title": "User Name"
        }
      },
      "required": ["id", "topic_id", "course_id"],
      "title": "CanvasDiscussionEntrySchema",
      "type": "object"
    },
    "slug": "CANVAS_NEW_CANVAS_DISCUSSION_MESSAGE_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "course_id": {
          "description": "The ID of the Canvas course to monitor for new discussion topics.",
          "title": "Course Id",
          "type": "integer"
        },
        "filter_by": {
          "default": "all",
          "description": "The state of the discussion topics to return. Options: 'all', 'unread'.",
          "title": "Filter By",
          "type": "string"
        },
        "include": {
          "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
          "default": null,
          "description": "Additional fields to include. Options: 'all_dates', 'sections', 'sections_user_count', 'overrides'",
          "title": "Include"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "order_by": {
          "default": "recent_activity",
          "description": "Determines the order of the discussion topic list. Options: 'position', 'recent_activity', 'title'.",
          "title": "Order By",
          "type": "string"
        }
      },
      "required": ["course_id"],
      "title": "NewDiscussionConfig",
      "type": "object"
    },
    "description": "Polls a Canvas course for new discussion topics.",
    "instructions": "**Instructions for Setting Up the Trigger:**\n\n    1. Provide the course ID - this can be found in the URL when viewing the course in Canvas.\n       For example, in \"https://canvas.instructure.com/courses/12345\", the course ID is 12345.\n\n    2. Optionally configure additional parameters:\n       - Include additional fields like 'all_dates', 'sections', etc.\n       - Change the ordering of discussions (defaults to 'recent_activity' for optimal detection)\n       - Filter discussions by state ('all' or 'unread')\n\n    3. On first poll, the trigger will establish a baseline and won't trigger for existing discussions.\n\n    4. Subsequent polls will identify and trigger only for genuinely new discussions.\n    ",
    "name": "New Canvas Discussion Topic",
    "payload": {
      "$defs": {
        "DiscussionTopic": {
          "properties": {
            "author": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "Author information if available.",
              "title": "Author"
            },
            "course_id": {
              "description": "The course ID the discussion belongs to.",
              "title": "Course Id",
              "type": "integer"
            },
            "id": {
              "description": "The ID of the discussion topic.",
              "title": "Id",
              "type": "integer"
            },
            "posted_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "When the discussion topic was posted.",
              "title": "Posted At"
            },
            "title": {
              "description": "The title of the discussion topic.",
              "title": "Title",
              "type": "string"
            },
            "user_id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "User ID of the discussion author.",
              "title": "User Id"
            }
          },
          "required": ["id", "title", "course_id"],
          "title": "DiscussionTopic",
          "type": "object"
        }
      },
      "description": "Payload model for Canvas discussion topic events.",
      "properties": {
        "event_type": {
          "default": "new_discussion",
          "description": "Type of discussion event",
          "title": "Event Type",
          "type": "string"
        },
        "topic": {
          "description": "The discussion topic that was created",
          "properties": {
            "author": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "Author information if available.",
              "title": "Author"
            },
            "course_id": {
              "description": "The course ID the discussion belongs to.",
              "title": "Course Id",
              "type": "integer"
            },
            "id": {
              "description": "The ID of the discussion topic.",
              "title": "Id",
              "type": "integer"
            },
            "posted_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "When the discussion topic was posted.",
              "title": "Posted At"
            },
            "title": {
              "description": "The title of the discussion topic.",
              "title": "Title",
              "type": "string"
            },
            "user_id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "User ID of the discussion author.",
              "title": "User Id"
            }
          },
          "required": ["id", "title", "course_id"],
          "title": "DiscussionTopic",
          "type": "object"
        }
      },
      "required": ["topic"],
      "title": "DiscussionPayload",
      "type": "object"
    },
    "slug": "CANVAS_NEW_CANVAS_DISCUSSION_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "user_id": {
          "description": "The ID of the user to monitor courses for.",
          "title": "User Id",
          "type": "integer"
        }
      },
      "required": ["user_id"],
      "title": "CanvasNewCourseConfig",
      "type": "object"
    },
    "description": "Polls Canvas for newly created courses for a specific user.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    1. Provide the user ID to monitor courses for. This can be found in the Canvas user profile URL.\n       For example, in \"https://canvas.instructure.com/users/12345\", the user ID is 12345.\n\n    2. This trigger will fire whenever a new course is created or the user is enrolled in a new course.\n    ",
    "name": "New Course Created for User",
    "payload": {
      "properties": {
        "account_id": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "default": null,
          "description": "The account ID the course belongs to.",
          "title": "Account Id"
        },
        "course_code": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The course code.",
          "title": "Course Code"
        },
        "created_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the course was created.",
          "title": "Created At"
        },
        "end_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the course ends.",
          "title": "End At"
        },
        "enrollment_term_id": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "default": null,
          "description": "The term ID for this course.",
          "title": "Enrollment Term Id"
        },
        "id": { "description": "The ID of the course.", "title": "Id", "type": "integer" },
        "name": { "description": "The name of the course.", "title": "Name", "type": "string" },
        "start_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the course starts.",
          "title": "Start At"
        },
        "time_zone": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The time zone of the course.",
          "title": "Time Zone"
        },
        "workflow_state": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The state of the course.",
          "title": "Workflow State"
        }
      },
      "required": ["id", "name"],
      "title": "NewCourseSchema",
      "type": "object"
    },
    "slug": "CANVAS_NEW_COURSE_CREATED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "course_id": {
          "description": "The ID of the Canvas course to monitor for new file uploads.",
          "title": "Course Id",
          "type": "integer"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "required": ["course_id"],
      "title": "CanvasNewFileUploadConfig",
      "type": "object"
    },
    "description": "Polls a Canvas course for new file uploads.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    1. Provide the course ID - this can be found in the URL when viewing the course in Canvas.\n       For example, in \"https://canvas.instructure.com/courses/12345\", the course ID is 12345.\n\n    2. The trigger will fire whenever new files are uploaded to the course.\n    ",
    "name": "New Canvas File Upload",
    "payload": {
      "$defs": {
        "CanvasFileSchema": {
          "properties": {
            "content_type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The content type of the file.",
              "title": "Content Type"
            },
            "created_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "When the file was created.",
              "title": "Created At"
            },
            "display_name": {
              "description": "The display name of the file.",
              "title": "Display Name",
              "type": "string"
            },
            "filename": {
              "description": "The filename of the uploaded file.",
              "title": "Filename",
              "type": "string"
            },
            "folder_id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the folder containing the file.",
              "title": "Folder Id"
            },
            "id": { "description": "The ID of the file.", "title": "Id", "type": "integer" },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The size of the file in bytes.",
              "title": "Size"
            },
            "url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The URL to download the file.",
              "title": "Url"
            }
          },
          "required": ["id", "display_name", "filename"],
          "title": "CanvasFileSchema",
          "type": "object"
        }
      },
      "properties": {
        "new_files": {
          "description": "The new files uploaded to Canvas.",
          "items": {
            "properties": {
              "content_type": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "default": null,
                "description": "The content type of the file.",
                "title": "Content Type"
              },
              "created_at": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "default": null,
                "description": "When the file was created.",
                "title": "Created At"
              },
              "display_name": {
                "description": "The display name of the file.",
                "title": "Display Name",
                "type": "string"
              },
              "filename": {
                "description": "The filename of the uploaded file.",
                "title": "Filename",
                "type": "string"
              },
              "folder_id": {
                "anyOf": [{ "type": "integer" }, { "type": "null" }],
                "default": null,
                "description": "The ID of the folder containing the file.",
                "title": "Folder Id"
              },
              "id": { "description": "The ID of the file.", "title": "Id", "type": "integer" },
              "size": {
                "anyOf": [{ "type": "integer" }, { "type": "null" }],
                "default": null,
                "description": "The size of the file in bytes.",
                "title": "Size"
              },
              "url": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "default": null,
                "description": "The URL to download the file.",
                "title": "Url"
              }
            },
            "required": ["id", "display_name", "filename"],
            "title": "CanvasFileSchema",
            "type": "object"
          },
          "title": "New Files",
          "type": "array"
        }
      },
      "required": ["new_files"],
      "title": "CanvasNewFileUploadPayload",
      "type": "object"
    },
    "slug": "CANVAS_NEW_FILE_UPLOADED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "folderId": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Show only docs belonging to the given folder.",
          "title": "Folderid"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "isOwner": {
          "anyOf": [{ "type": "boolean" }, { "type": "null" }],
          "default": null,
          "description": "Show only docs owned by the user.",
          "title": "Isowner"
        },
        "isPublished": {
          "anyOf": [{ "type": "boolean" }, { "type": "null" }],
          "default": null,
          "description": "Show only published docs.",
          "title": "Ispublished"
        },
        "isStarred": {
          "anyOf": [{ "type": "boolean" }, { "type": "null" }],
          "default": null,
          "description": "If true, returns docs that are starred. If false, returns docs that are not starred.",
          "title": "Isstarred"
        },
        "limit": {
          "default": 25,
          "description": "Maximum number of items to retrieve in a single poll (1-100).",
          "examples": [25],
          "title": "Limit",
          "type": "integer"
        },
        "workspaceId": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Show only docs belonging to the given workspace.",
          "title": "Workspaceid"
        }
      },
      "title": "CodaDocDeletedConfig",
      "type": "object"
    },
    "description": "Triggers when a Coda document is deleted.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - This trigger will detect when Coda documents are deleted.\n    - You can filter documents by owner, workspace, published status, and more.\n    - The trigger will only detect deletions for documents that the authenticated user has access to.\n    - Note: The trigger will establish a baseline of existing documents on first run and only report deletions thereafter.\n    ",
    "name": "Coda Document Deleted Trigger",
    "payload": {
      "$defs": {
        "CodaDocDeletedSchema": {
          "description": "Schema for deleted document information returned as result",
          "properties": {
            "createdAt": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The creation timestamp of the document",
              "title": "Created At"
            },
            "deleted_at": {
              "description": "The timestamp when the document was detected as deleted",
              "title": "Deleted At",
              "type": "string"
            },
            "folderId": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the folder that contained the document",
              "title": "Folder ID"
            },
            "id": {
              "description": "The ID of the deleted document",
              "title": "Document ID",
              "type": "string"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the deleted document",
              "title": "Document Name"
            },
            "owner": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The email of the document owner",
              "title": "Owner Email"
            },
            "ownerName": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the document owner",
              "title": "Owner Name"
            },
            "workspaceId": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the workspace that contained the document",
              "title": "Workspace ID"
            }
          },
          "required": ["id", "deleted_at"],
          "title": "CodaDocDeletedSchema",
          "type": "object"
        }
      },
      "description": "Payload for document deletion events",
      "properties": {
        "document": {
          "description": "The document that was deleted",
          "properties": {
            "createdAt": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The creation timestamp of the document",
              "title": "Created At"
            },
            "deleted_at": {
              "description": "The timestamp when the document was detected as deleted",
              "title": "Deleted At",
              "type": "string"
            },
            "folderId": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the folder that contained the document",
              "title": "Folder ID"
            },
            "id": {
              "description": "The ID of the deleted document",
              "title": "Document ID",
              "type": "string"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the deleted document",
              "title": "Document Name"
            },
            "owner": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The email of the document owner",
              "title": "Owner Email"
            },
            "ownerName": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the document owner",
              "title": "Owner Name"
            },
            "workspaceId": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the workspace that contained the document",
              "title": "Workspace ID"
            }
          },
          "required": ["id", "deleted_at"],
          "title": "CodaDocDeletedSchema",
          "type": "object"
        },
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" }
      },
      "required": ["event_type", "document"],
      "title": "CodaDocDeletedPayload",
      "type": "object"
    },
    "slug": "CODA_CODA_DOCUMENT_DELETED",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "folderId": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Show only docs belonging to the given folder.",
          "title": "Folderid"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "isOwner": {
          "anyOf": [{ "type": "boolean" }, { "type": "null" }],
          "default": null,
          "description": "Show only docs owned by the user.",
          "title": "Isowner"
        },
        "isPublished": {
          "anyOf": [{ "type": "boolean" }, { "type": "null" }],
          "default": null,
          "description": "Show only published docs.",
          "title": "Ispublished"
        },
        "isStarred": {
          "anyOf": [{ "type": "boolean" }, { "type": "null" }],
          "default": null,
          "description": "If true, returns docs that are starred. If false, returns docs that are not starred.",
          "title": "Isstarred"
        },
        "limit": {
          "default": 25,
          "description": "Maximum number of items to retrieve in a single poll (1-100).",
          "examples": [25],
          "title": "Limit",
          "type": "integer"
        },
        "workspaceId": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Show only docs belonging to the given workspace.",
          "title": "Workspaceid"
        }
      },
      "title": "NewCodeDocumentConfig",
      "type": "object"
    },
    "description": "Triggers when a new Coda document is created.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - This trigger will detect new Coda documents as they are created.\n    - You can filter documents by owner, workspace, published status, and more.\n    - The trigger will only detect documents that the authenticated user has access to.\n    - Note: The trigger will establish a baseline of existing documents on first run and only report new documents thereafter.\n    ",
    "name": "New Coda Document Trigger",
    "payload": {
      "properties": {
        "browserLink": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The browser link to the document",
          "title": "Browser Link"
        },
        "createdAt": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The creation timestamp of the document",
          "title": "Created At"
        },
        "folderId": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the folder containing the document",
          "title": "Folder ID"
        },
        "href": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The URL of the document",
          "title": "Document URL"
        },
        "id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the document",
          "title": "Document ID"
        },
        "name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The name of the document",
          "title": "Document Name"
        },
        "owner": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The email of the document owner",
          "title": "Owner Email"
        },
        "ownerName": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The name of the document owner",
          "title": "Owner Name"
        },
        "type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of the document",
          "title": "Document Type"
        },
        "updatedAt": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The last update timestamp of the document",
          "title": "Updated At"
        },
        "workspaceId": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the workspace containing the document",
          "title": "Workspace ID"
        }
      },
      "title": "NewCodeDocumentPayload",
      "type": "object"
    },
    "slug": "CODA_NEW_CODA_DOCUMENT",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "docId": {
          "description": "ID of the Coda document to monitor for new pages.",
          "examples": ["doc-abcd1234"],
          "title": "Docid",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "limit": {
          "default": 25,
          "description": "Maximum number of pages to retrieve in a single poll (1-100).",
          "examples": [25],
          "title": "Limit",
          "type": "integer"
        }
      },
      "required": ["docId"],
      "title": "CodaNewPageConfig",
      "type": "object"
    },
    "description": "Triggers when a new page is added to a Coda document.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - You need the Coda document ID (docId) to monitor for new pages.\n    - The document ID can be found in the URL of your Coda document after \"doc/\".\n    - Ensure you have proper access permissions to the document.\n    ",
    "name": "New Coda Page Trigger",
    "payload": {
      "$defs": {
        "CodaPageSchema": {
          "properties": {
            "browserLink": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The browser link to the page",
              "title": "Browser Link"
            },
            "created_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The creation timestamp of the page",
              "title": "Created At"
            },
            "href": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The URL of the page",
              "title": "Page URL"
            },
            "id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the page",
              "title": "Page ID"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the page",
              "title": "Page Name"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the page",
              "title": "Page Type"
            }
          },
          "title": "CodaPageSchema",
          "type": "object"
        }
      },
      "description": "Payload for page events",
      "properties": {
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" },
        "page": {
          "description": "The page that triggered the event",
          "properties": {
            "browserLink": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The browser link to the page",
              "title": "Browser Link"
            },
            "created_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The creation timestamp of the page",
              "title": "Created At"
            },
            "href": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The URL of the page",
              "title": "Page URL"
            },
            "id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the page",
              "title": "Page ID"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the page",
              "title": "Page Name"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the page",
              "title": "Page Type"
            }
          },
          "title": "CodaPageSchema",
          "type": "object"
        }
      },
      "required": ["event_type", "page"],
      "title": "CodaNewPagePayload",
      "type": "object"
    },
    "slug": "CODA_NEW_CODA_PAGE",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "docId": {
          "description": "ID of the Coda document containing the page to monitor.",
          "examples": ["doc-abcd1234"],
          "title": "Docid",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "pageIdOrName": {
          "description": "ID or name of the specific page to monitor for updates.",
          "examples": ["canvas-XYZ123", "My Page Name"],
          "title": "Pageidorname",
          "type": "string"
        }
      },
      "required": ["docId", "pageIdOrName"],
      "title": "CodaPageUpdateConfig",
      "type": "object"
    },
    "description": "Triggers when a specific page within a Coda document is updated.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - You need the Coda document ID (docId) that contains the page to monitor.\n    - You need the page ID or name (pageIdOrName) to monitor for updates.\n    - The document ID can be found in the URL of your Coda document after \"doc/\".\n    - The page ID can be found in the page's URL or via the Coda API.\n    - If using a page name, be aware that if multiple pages have the same name, an arbitrary one will be selected.\n    - Ensure you have proper access permissions to the document and page.\n    ",
    "name": "Specific Coda Page Updated Trigger",
    "payload": {
      "$defs": {
        "CodaPageUpdateSchema": {
          "properties": {
            "browserLink": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The browser link to the page",
              "title": "Browser Link"
            },
            "href": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The URL of the page",
              "title": "Page URL"
            },
            "id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the page",
              "title": "Page ID"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the page",
              "title": "Page Name"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the page",
              "title": "Page Type"
            },
            "updated_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The update timestamp of the page",
              "title": "Updated At"
            },
            "updated_by": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "User who updated the page",
              "title": "Updated By"
            }
          },
          "title": "CodaPageUpdateSchema",
          "type": "object"
        }
      },
      "description": "Payload for page update events",
      "properties": {
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" },
        "page": {
          "description": "The page that was updated",
          "properties": {
            "browserLink": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The browser link to the page",
              "title": "Browser Link"
            },
            "href": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The URL of the page",
              "title": "Page URL"
            },
            "id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the page",
              "title": "Page ID"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the page",
              "title": "Page Name"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the page",
              "title": "Page Type"
            },
            "updated_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The update timestamp of the page",
              "title": "Updated At"
            },
            "updated_by": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "User who updated the page",
              "title": "Updated By"
            }
          },
          "title": "CodaPageUpdateSchema",
          "type": "object"
        }
      },
      "required": ["event_type", "page"],
      "title": "CodaPageUpdatePayload",
      "type": "object"
    },
    "slug": "CODA_SPECIFIC_CODA_PAGE_UPDATED",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "channel_id": {
          "description": "The ID of the Discord channel to monitor for new messages.",
          "title": "Channel Id",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "limit": {
          "default": 50,
          "description": "The number of messages to fetch per poll.",
          "title": "Limit",
          "type": "integer"
        }
      },
      "required": ["channel_id"],
      "title": "NewMessageConfig",
      "type": "object"
    },
    "description": "Polls a specific Discord channel for new messages.",
    "instructions": "\n    1. Provide the channel ID of the Discord channel you'd like to poll.\n    2. On first poll, we skip returning existing messages to avoid a flood.\n    3. On subsequent polls, any message with an ID greater than the last seen ID is returned as 'new.'\n    ",
    "name": "New Discord Message Trigger",
    "payload": {
      "$defs": {
        "DiscordMessageSchema": {
          "properties": {
            "author_id": {
              "default": "",
              "description": "User ID of the message author.",
              "title": "Author Id",
              "type": "string"
            },
            "channel_id": {
              "description": "Which channel the message is in.",
              "title": "Channel Id",
              "type": "string"
            },
            "content": {
              "default": "",
              "description": "The text content of the message.",
              "title": "Content",
              "type": "string"
            },
            "message_id": {
              "description": "The ID of the message.",
              "title": "Message Id",
              "type": "string"
            },
            "timestamp": {
              "default": "",
              "description": "ISO8601 timestamp of when the message was created.",
              "title": "Timestamp",
              "type": "string"
            },
            "username": {
              "default": "",
              "description": "Username of the message author.",
              "title": "Username",
              "type": "string"
            }
          },
          "required": ["message_id", "channel_id"],
          "title": "DiscordMessageSchema",
          "type": "object"
        }
      },
      "description": "Payload model for Discord message events.",
      "properties": {
        "event_type": {
          "default": "new_message",
          "description": "Type of Discord message event",
          "title": "Event Type",
          "type": "string"
        },
        "message": {
          "description": "The Discord message that was created",
          "properties": {
            "author_id": {
              "default": "",
              "description": "User ID of the message author.",
              "title": "Author Id",
              "type": "string"
            },
            "channel_id": {
              "description": "Which channel the message is in.",
              "title": "Channel Id",
              "type": "string"
            },
            "content": {
              "default": "",
              "description": "The text content of the message.",
              "title": "Content",
              "type": "string"
            },
            "message_id": {
              "description": "The ID of the message.",
              "title": "Message Id",
              "type": "string"
            },
            "timestamp": {
              "default": "",
              "description": "ISO8601 timestamp of when the message was created.",
              "title": "Timestamp",
              "type": "string"
            },
            "username": {
              "default": "",
              "description": "Username of the message author.",
              "title": "Username",
              "type": "string"
            }
          },
          "required": ["message_id", "channel_id"],
          "title": "DiscordMessageSchema",
          "type": "object"
        }
      },
      "required": ["message"],
      "title": "MessagePayload",
      "type": "object"
    },
    "slug": "DISCORD_DISCORD_NEW_MESSAGE_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "TranscriptionCompleteConfig",
      "type": "object"
    },
    "description": "Triggers when a transcription is complete. Polls Fireflies API for transcripts\n    created or updated since the last poll time. Handles rate limiting gracefully.",
    "instructions": "",
    "name": "Transcription Complete Trigger",
    "payload": {
      "$defs": {
        "TranscriptSchema": {
          "properties": {
            "id": { "description": "The ID of the transcript", "title": "Id", "type": "string" },
            "summary": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "The summary of the transcript",
              "title": "Summary"
            }
          },
          "required": ["id"],
          "title": "TranscriptSchema",
          "type": "object"
        }
      },
      "description": "Payload model for Fireflies transcript events.",
      "properties": {
        "event_type": {
          "default": "transcription_complete",
          "description": "Type of transcript event",
          "title": "Event Type",
          "type": "string"
        },
        "transcript": {
          "description": "The transcript that was completed",
          "properties": {
            "id": { "description": "The ID of the transcript", "title": "Id", "type": "string" },
            "summary": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "The summary of the transcript",
              "title": "Summary"
            }
          },
          "required": ["id"],
          "title": "TranscriptSchema",
          "type": "object"
        }
      },
      "required": ["transcript"],
      "title": "TranscriptPayload",
      "type": "object"
    },
    "slug": "FIREFLIES_TRANSCRIPTION_COMPLETE",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "owner": { "description": "Owner of the repository", "title": "Owner", "type": "string" },
        "repo": { "description": "Repository name", "title": "Repo", "type": "string" }
      },
      "required": ["owner", "repo"],
      "title": "WebhookConfigSchema",
      "type": "object"
    },
    "description": "Triggered when a new commit is pushed to a repository.",
    "instructions": "This trigger fires every time a new commit is pushed to the repository.",
    "name": "Commit Event",
    "payload": {
      "properties": {
        "author": {
          "description": "The GitHub username of the commit author",
          "examples": ["octocat"],
          "title": "Author",
          "type": "string"
        },
        "id": {
          "description": "The SHA of the commit",
          "examples": ["7638417db6d59f3c431d3e1f261cc637155684cd"],
          "title": "Id",
          "type": "string"
        },
        "message": {
          "description": "The commit message",
          "examples": ["Fix typo in README"],
          "title": "Message",
          "type": "string"
        },
        "timestamp": {
          "description": "The timestamp of the commit",
          "examples": ["2021-04-14T02:15:15Z"],
          "title": "Timestamp",
          "type": "string"
        },
        "url": {
          "description": "The GitHub URL of the commit",
          "examples": [
            "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
          ],
          "title": "Url",
          "type": "string"
        }
      },
      "required": ["id", "message", "timestamp", "author", "url"],
      "title": "CommitPayloadSchema",
      "type": "object"
    },
    "slug": "GITHUB_COMMIT_EVENT",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "GithubFollowerConfig",
      "type": "object"
    },
    "description": "Triggers when there are changes in GitHub followers.",
    "instructions": "**Instructions for Setting Up the Trigger:**\n\n    This trigger fires when there are changes in your GitHub followers.\n    It detects new followers and unfollowers.\n    ",
    "name": "Follower Changes",
    "payload": {
      "properties": {
        "username": {
          "description": "Username of the github follower",
          "title": "Username",
          "type": "string"
        }
      },
      "required": ["username"],
      "title": "GithubFollowerPayload",
      "type": "object"
    },
    "slug": "GITHUB_FOLLOWER_EVENT",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "owner": { "description": "Owner of the repository", "title": "Owner", "type": "string" },
        "repo": { "description": "Repository name", "title": "Repo", "type": "string" }
      },
      "required": ["owner", "repo"],
      "title": "WebhookConfigSchema",
      "type": "object"
    },
    "description": "Triggered when a new issue is added to the repository.",
    "instructions": "This trigger fires every time a new issue is added to the repository.",
    "name": "Issue Added Event",
    "payload": {
      "properties": {
        "action": {
          "description": "The action that was performed on the issue",
          "examples": ["opened"],
          "title": "Action",
          "type": "string"
        },
        "createdAt": {
          "description": "The timestamp when the issue was created",
          "examples": ["2021-04-14T02:15:15Z"],
          "title": "Createdat",
          "type": "string"
        },
        "createdBy": {
          "description": "The GitHub username of the user who created the issue",
          "examples": ["octocat"],
          "title": "Createdby",
          "type": "string"
        },
        "description": {
          "default": "",
          "description": "A detailed description of the issue",
          "examples": ["There is a bug in the code that needs to be fixed."],
          "title": "Description",
          "type": "string"
        },
        "issue_id": {
          "description": "The unique ID assigned to the issue",
          "examples": [101],
          "title": "Issue Id",
          "type": "integer"
        },
        "number": {
          "description": "The unique number assigned to the issue",
          "examples": [42],
          "title": "Number",
          "type": "integer"
        },
        "title": {
          "description": "The title of the issue",
          "examples": ["Bug in code"],
          "title": "Title",
          "type": "string"
        },
        "url": {
          "description": "The GitHub URL of the issue",
          "examples": ["https://github.com/octocat/Hello-World/issues/42"],
          "title": "Url",
          "type": "string"
        }
      },
      "required": ["action", "issue_id", "number", "title", "createdBy", "createdAt", "url"],
      "title": "IssueAddedPayloadSchema",
      "type": "object"
    },
    "slug": "GITHUB_ISSUE_ADDED_EVENT",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "owner": { "description": "Owner of the repository", "title": "Owner", "type": "string" },
        "repo": { "description": "Repository name", "title": "Repo", "type": "string" }
      },
      "required": ["owner", "repo"],
      "title": "WebhookConfigSchema",
      "type": "object"
    },
    "description": "Triggered when a new label is added to a pull request.",
    "instructions": "This trigger fires every time a new label is added to a pull request on the repository.",
    "name": "Label Added Event",
    "payload": {
      "properties": {
        "action": {
          "description": "The action that was performed on the label",
          "examples": ["labeled"],
          "title": "Action",
          "type": "string"
        },
        "label": {
          "description": "The name of the label that was added",
          "examples": ["bug", "enhancement"],
          "title": "Label",
          "type": "string"
        },
        "labeled_at": {
          "description": "The timestamp when the label was added",
          "examples": ["2021-04-14T02:15:15Z"],
          "title": "Labeled At",
          "type": "string"
        },
        "labeled_by": {
          "description": "The GitHub username of the user who added the label",
          "examples": ["octocat"],
          "title": "Labeled By",
          "type": "string"
        },
        "pull_request_number": {
          "description": "The unique number assigned to the pull request",
          "examples": [42],
          "title": "Pull Request Number",
          "type": "integer"
        },
        "pull_request_title": {
          "description": "The title of the pull request",
          "examples": ["Fix typo in README"],
          "title": "Pull Request Title",
          "type": "string"
        },
        "pull_request_url": {
          "description": "The GitHub URL of the pull request",
          "examples": ["https://github.com/octocat/Hello-World/pull/42"],
          "title": "Pull Request Url",
          "type": "string"
        }
      },
      "required": [
        "action",
        "label",
        "pull_request_number",
        "pull_request_title",
        "pull_request_url",
        "labeled_by",
        "labeled_at"
      ],
      "title": "LabelAddedPayloadSchema",
      "type": "object"
    },
    "slug": "GITHUB_LABEL_ADDED_EVENT",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "owner": { "description": "Owner of the repository", "title": "Owner", "type": "string" },
        "repo": { "description": "Repository name", "title": "Repo", "type": "string" }
      },
      "required": ["owner", "repo"],
      "title": "WebhookConfigSchema",
      "type": "object"
    },
    "description": "Triggered when a pull request is opened, closed, or synchronized.",
    "instructions": "This trigger fires every time a pull request is opened, closed, or synchronized on the repository.",
    "name": "Pull Request Event",
    "payload": {
      "properties": {
        "action": {
          "description": "The action that was performed on the pull request",
          "examples": ["opened", "closed", "synchronize"],
          "title": "Action",
          "type": "string"
        },
        "createdAt": {
          "description": "The timestamp when the pull request was created",
          "examples": ["2021-04-14T02:15:15Z"],
          "title": "Createdat",
          "type": "string"
        },
        "createdBy": {
          "description": "The GitHub username of the user who created the pull request",
          "examples": ["octocat"],
          "title": "Createdby",
          "type": "string"
        },
        "description": {
          "default": "",
          "description": "A detailed description of the pull request",
          "examples": [
            "This pull request fixes a typo found in the README file under the 'Installation' section."
          ],
          "title": "Description",
          "type": "string"
        },
        "number": {
          "description": "The unique number assigned to the pull request",
          "examples": [42],
          "title": "Number",
          "type": "integer"
        },
        "title": {
          "description": "The title of the pull request",
          "examples": ["Fix typo in README"],
          "title": "Title",
          "type": "string"
        },
        "url": {
          "description": "The GitHub URL of the pull request",
          "examples": ["https://github.com/octocat/Hello-World/pull/42"],
          "title": "Url",
          "type": "string"
        }
      },
      "required": ["action", "number", "title", "createdBy", "createdAt", "url"],
      "title": "PullRequestPayloadSchema",
      "type": "object"
    },
    "slug": "GITHUB_PULL_REQUEST_EVENT",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "owner": { "description": "Owner of the repository", "title": "Owner", "type": "string" },
        "repo": { "description": "Repository name", "title": "Repo", "type": "string" }
      },
      "required": ["owner", "repo"],
      "title": "WebhookConfigSchema",
      "type": "object"
    },
    "description": "Triggered when a new star is added to the repository.",
    "instructions": "This trigger fires every time a new star is added to the repository.",
    "name": "Star Added Event",
    "payload": {
      "properties": {
        "action": {
          "description": "The action that was performed on the star",
          "examples": ["created"],
          "title": "Action",
          "type": "string"
        },
        "repository_id": {
          "description": "The unique ID assigned to the repository",
          "examples": [101],
          "title": "Repository Id",
          "type": "integer"
        },
        "repository_name": {
          "description": "The name of the repository",
          "examples": ["Hello-World"],
          "title": "Repository Name",
          "type": "string"
        },
        "repository_url": {
          "description": "The GitHub URL of the repository",
          "examples": ["https://github.com/octocat/Hello-World"],
          "title": "Repository Url",
          "type": "string"
        },
        "starred_at": {
          "description": "The timestamp when the star was added",
          "examples": ["2021-04-14T02:15:15Z"],
          "title": "Starred At",
          "type": "string"
        },
        "starred_by": {
          "description": "The GitHub username of the user who added the star",
          "examples": ["octocat"],
          "title": "Starred By",
          "type": "string"
        }
      },
      "required": [
        "action",
        "starred_at",
        "repository_id",
        "repository_name",
        "repository_url",
        "starred_by"
      ],
      "title": "StarAddedPayloadSchema",
      "type": "object"
    },
    "slug": "GITHUB_STAR_ADDED_EVENT",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "labelIds": {
          "default": "INBOX",
          "description": "Filter messages by a single label ID. Labels identify the status or category of messages. Supported labels include 'INBOX', 'SPAM', 'TRASH', 'UNREAD', 'STARRED', 'IMPORTANT', 'CATEGORY_PERSONAL', 'CATEGORY_SOCIAL', 'CATEGORY_PROMOTIONS', 'CATEGORY_UPDATES', and 'CATEGORY_FORUMS'. For complex label filtering, use the 'query' parameter instead.",
          "examples": ["INBOX", "UNREAD", "STARRED"],
          "title": "Labelids",
          "type": "string"
        },
        "query": {
          "default": "",
          "description": "Advanced Gmail search using the same syntax as Gmail's search box. Use 'AND' for messages that match all conditions, 'OR' for any condition. Search by sender (from:email@domain.com), labels (label:inbox), status (is:unread), attachments (has:attachment), dates (after:2023/1/1), and more. If specified, this takes precedence over labelIds.",
          "examples": [
            "label:inbox OR label:sent",
            "from:example@gmail.com is:unread",
            "has:attachment after:2023/1/1",
            "is:important is:unread"
          ],
          "title": "Query",
          "type": "string"
        },
        "userId": {
          "default": "me",
          "description": "The user's email address or 'me' for the authenticated user.",
          "examples": ["me"],
          "title": "Userid",
          "type": "string"
        }
      },
      "title": "NewMessageConfig",
      "type": "object"
    },
    "description": "Triggers when a new message is received in Gmail.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Ensure that the Gmail API is enabled for your Google account.\n    - Provide the user ID (usually 'me' for the authenticated user).\n    - Optionally, provide label IDs to filter messages.\n    ",
    "name": "New Gmail Message Received Trigger",
    "payload": {
      "properties": {
        "attachment_list": {
          "anyOf": [{ "items": {}, "type": "array" }, { "type": "null" }],
          "default": null,
          "description": "The list of attachments in the message",
          "title": "Attachment List"
        },
        "message_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The message ID of the message",
          "title": "Message ID"
        },
        "message_text": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The text of the message",
          "title": "Message Text"
        },
        "message_timestamp": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The timestamp of the message",
          "title": "Message Timestamp"
        },
        "payload": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "The payload of the message",
          "title": "Payload"
        },
        "sender": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The sender of the message",
          "title": "Sender"
        },
        "subject": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The subject of the message",
          "title": "Subject"
        },
        "thread_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The thread ID of the message",
          "title": "Thread ID"
        },
        "to": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The recipient of the message",
          "title": "To"
        }
      },
      "title": "NewMessagePayload",
      "type": "object"
    },
    "slug": "GMAIL_NEW_GMAIL_MESSAGE",
    "type": "poll"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {
        "calendar_id": {
          "default": "primary",
          "description": "The unique identifier for the calendar",
          "title": "Calendar Id",
          "type": "string"
        },
        "ttl": {
          "default": 604800,
          "description": "The time-to-live in seconds for the notification channel",
          "title": "Ttl",
          "type": "integer"
        }
      },
      "title": "GoogleCalendarTriggerConfig",
      "type": "object"
    },
    "description": "**SOON TO BE DEPRECATED** - Use Calendar Event Sync (polling trigger) instead.\n    Real-time webhook trigger for calendar event changes. Returns event metadata only.\n    For full event data, use Calendar Event Sync (polling trigger).",
    "instructions": "",
    "name": "Calendar Event Changes",
    "payload": {
      "description": "Data structure for Google Calendar event changes",
      "properties": {
        "channel_id": {
          "description": "The unique identifier passed to identify this channel",
          "title": "Channel Id",
          "type": "string"
        },
        "resource_id": {
          "description": "The unique identifier of the resource",
          "title": "Resource Id",
          "type": "string"
        },
        "resource_state": {
          "description": "The state of the resource",
          "title": "Resource State",
          "type": "string"
        },
        "resource_url": {
          "description": "The url for the resource",
          "title": "Resource Url",
          "type": "string"
        }
      },
      "required": ["resource_id", "resource_url", "resource_state", "channel_id"],
      "title": "GoogleCalendarEventChangePayload",
      "type": "object"
    },
    "slug": "GOOGLECALENDAR_GOOGLE_CALENDAR_EVENT_CHANGE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for Google Calendar event polling",
      "properties": {
        "calendarId": {
          "default": "primary",
          "description": "The unique identifier for the calendar",
          "examples": ["primary", "example@gmail.com"],
          "title": "Calendarid",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "maxResults": {
          "default": 250,
          "description": "Maximum number of events to retrieve per poll (1-2500)",
          "examples": [250],
          "maximum": 2500,
          "minimum": 1,
          "title": "Maxresults",
          "type": "integer"
        },
        "showDeleted": {
          "default": true,
          "description": "Whether to include deleted events in the results",
          "examples": [true, false],
          "title": "Showdeleted",
          "type": "boolean"
        }
      },
      "title": "GoogleCalendarEventSyncConfig",
      "type": "object"
    },
    "description": "Polling trigger that returns full event data including details, attendees, and metadata.\n    For real-time notifications with basic info, use Calendar Event Changes (webhook).",
    "instructions": "\n    **Calendar Event Sync (Polling):**\n    \n    - Returns complete event data: title, description, attendees, times, etc.\n    - Polls at intervals you configure (not real-time)\n    - Provide calendar ID (usually 'primary' for main calendar)\n    - Set show_deleted to true to capture deleted events\n    ",
    "name": "Calendar Event Sync",
    "payload": {
      "description": "Payload structure for Google Calendar event sync",
      "properties": {
        "attendees": {
          "description": "List of attendees",
          "items": { "type": "object" },
          "title": "Attendees",
          "type": "array"
        },
        "calendar_id": {
          "description": "The calendar identifier",
          "title": "Calendar Id",
          "type": "string"
        },
        "created_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event was created",
          "title": "Created At"
        },
        "creator_email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email of the event creator",
          "title": "Creator Email"
        },
        "creator_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the event creator",
          "title": "Creator Name"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event description",
          "title": "Description"
        },
        "end_time": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event end time in ISO format",
          "title": "End Time"
        },
        "event_id": {
          "description": "The unique identifier of the event",
          "title": "Event Id",
          "type": "string"
        },
        "event_type": {
          "description": "Type of change: created, updated, or deleted",
          "title": "Event Type",
          "type": "string"
        },
        "html_link": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Link to the event in Google Calendar",
          "title": "Html Link"
        },
        "location": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event location",
          "title": "Location"
        },
        "organizer_email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email of the event organizer",
          "title": "Organizer Email"
        },
        "organizer_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the event organizer",
          "title": "Organizer Name"
        },
        "recurring_event_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of recurring event if applicable",
          "title": "Recurring Event Id"
        },
        "start_time": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event start time in ISO format",
          "title": "Start Time"
        },
        "status": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event status (confirmed, tentative, cancelled)",
          "title": "Status"
        },
        "summary": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event title/summary",
          "title": "Summary"
        },
        "updated_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event was last updated",
          "title": "Updated At"
        },
        "visibility": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event visibility",
          "title": "Visibility"
        }
      },
      "required": ["event_id", "event_type", "calendar_id"],
      "title": "GoogleCalendarEventSyncPayload",
      "type": "object"
    },
    "slug": "GOOGLECALENDAR_GOOGLE_CALENDAR_EVENT_SYNC_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "description": "Configuration for Google Drive trigger",
      "properties": {},
      "title": "DriveConfig",
      "type": "object"
    },
    "description": "Triggers when changes are detected in a Google Drive.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n    - Ensure you have set the necessary permissions to access Google Drive.\n    ",
    "name": "Google Drive Changes",
    "payload": {
      "description": "Schema for Google Drive trigger payload.\nCurrently no specific fields are present, but may include\nconfiguration options in the future.",
      "properties": {},
      "title": "DrivePayload",
      "type": "object"
    },
    "slug": "GOOGLEDRIVE_GOOGLE_DRIVE_CHANGES",
    "type": "poll"
  },
  {
    "config": {
      "description": "Configuration for Google Sheets new rows polling",
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "sheet_name": {
          "default": "Sheet1",
          "description": "The name of the specific sheet within the spreadsheet to monitor",
          "examples": ["Sheet1", "Leads", "Contacts"],
          "title": "Sheet Name",
          "type": "string"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet to monitor",
          "examples": ["1BiexwqQYjfC_BXy6zDQYJqb6zxzRyP9"],
          "title": "Spreadsheet Id",
          "type": "string"
        },
        "start_row": {
          "default": 2,
          "description": "The row number to start monitoring from (1-indexed, typically 2 to skip headers)",
          "examples": [1, 2, 3],
          "minimum": 1,
          "title": "Start Row",
          "type": "integer"
        }
      },
      "required": ["spreadsheet_id"],
      "title": "GoogleSheetsNewRowsConfig",
      "type": "object"
    },
    "description": "Simple polling trigger that monitors Google Sheets for new rows.\n    Detects when new rows are added and returns the complete row data.\n    Perfect for triggering any workflow based on new sheet entries.",
    "instructions": "\n    **New Rows in Google Sheet (Polling):**\n    \n    - Monitors a Google Sheet for new rows added\n    - Returns complete row data for each new entry detected\n    - Configure sheet ID, sheet name, and starting row\n    - Perfect for triggering workflows on new data entries\n    - Set start_row to 2 if your sheet has headers\n    ",
    "name": "New Rows in Google Sheet",
    "payload": {
      "description": "Payload structure for new row detected in Google Sheets",
      "properties": {
        "detected_at": {
          "description": "ISO timestamp when the row was detected",
          "title": "Detected At",
          "type": "string"
        },
        "row_data": {
          "description": "Complete row data as list of strings",
          "items": { "type": "string" },
          "title": "Row Data",
          "type": "array"
        },
        "row_number": {
          "description": "The row number in the sheet (1-indexed)",
          "title": "Row Number",
          "type": "integer"
        },
        "sheet_name": { "description": "The sheet name", "title": "Sheet Name", "type": "string" },
        "spreadsheet_id": {
          "description": "The spreadsheet ID",
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": ["row_number", "row_data", "spreadsheet_id", "sheet_name", "detected_at"],
      "title": "GoogleSheetsNewRowPayload",
      "type": "object"
    },
    "slug": "GOOGLESHEETS_NEW_ROWS_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {
        "calendar_id": {
          "default": "primary",
          "description": "The unique identifier for the calendar",
          "title": "Calendar Id",
          "type": "string"
        },
        "ttl": {
          "default": 604800,
          "description": "The time-to-live in seconds for the notification channel",
          "title": "Ttl",
          "type": "integer"
        }
      },
      "title": "GoogleCalendarTriggerConfig",
      "type": "object"
    },
    "description": "**SOON TO BE DEPRECATED** - Use Calendar Event Sync (polling trigger) instead.\n    Real-time webhook trigger for calendar event changes. Returns event metadata only.\n    For full event data, use Calendar Event Sync (polling trigger).",
    "instructions": "",
    "name": "Calendar Event Changes",
    "payload": {
      "description": "Data structure for Google Calendar event changes",
      "properties": {
        "channel_id": {
          "description": "The unique identifier passed to identify this channel",
          "title": "Channel Id",
          "type": "string"
        },
        "resource_id": {
          "description": "The unique identifier of the resource",
          "title": "Resource Id",
          "type": "string"
        },
        "resource_state": {
          "description": "The state of the resource",
          "title": "Resource State",
          "type": "string"
        },
        "resource_url": {
          "description": "The url for the resource",
          "title": "Resource Url",
          "type": "string"
        }
      },
      "required": ["resource_id", "resource_url", "resource_state", "channel_id"],
      "title": "GoogleCalendarEventChangePayload",
      "type": "object"
    },
    "slug": "GOOGLESUPER_GOOGLE_CALENDAR_EVENT_CHANGE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for Google Calendar event polling",
      "properties": {
        "calendarId": {
          "default": "primary",
          "description": "The unique identifier for the calendar",
          "examples": ["primary", "example@gmail.com"],
          "title": "Calendarid",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "maxResults": {
          "default": 250,
          "description": "Maximum number of events to retrieve per poll (1-2500)",
          "examples": [250],
          "maximum": 2500,
          "minimum": 1,
          "title": "Maxresults",
          "type": "integer"
        },
        "showDeleted": {
          "default": true,
          "description": "Whether to include deleted events in the results",
          "examples": [true, false],
          "title": "Showdeleted",
          "type": "boolean"
        }
      },
      "title": "GoogleCalendarEventSyncConfig",
      "type": "object"
    },
    "description": "Polling trigger that returns full event data including details, attendees, and metadata.\n    For real-time notifications with basic info, use Calendar Event Changes (webhook).",
    "instructions": "\n    **Calendar Event Sync (Polling):**\n    \n    - Returns complete event data: title, description, attendees, times, etc.\n    - Polls at intervals you configure (not real-time)\n    - Provide calendar ID (usually 'primary' for main calendar)\n    - Set show_deleted to true to capture deleted events\n    ",
    "name": "Calendar Event Sync",
    "payload": {
      "description": "Payload structure for Google Calendar event sync",
      "properties": {
        "attendees": {
          "description": "List of attendees",
          "items": { "type": "object" },
          "title": "Attendees",
          "type": "array"
        },
        "calendar_id": {
          "description": "The calendar identifier",
          "title": "Calendar Id",
          "type": "string"
        },
        "created_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event was created",
          "title": "Created At"
        },
        "creator_email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email of the event creator",
          "title": "Creator Email"
        },
        "creator_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the event creator",
          "title": "Creator Name"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event description",
          "title": "Description"
        },
        "end_time": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event end time in ISO format",
          "title": "End Time"
        },
        "event_id": {
          "description": "The unique identifier of the event",
          "title": "Event Id",
          "type": "string"
        },
        "event_type": {
          "description": "Type of change: created, updated, or deleted",
          "title": "Event Type",
          "type": "string"
        },
        "html_link": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Link to the event in Google Calendar",
          "title": "Html Link"
        },
        "location": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event location",
          "title": "Location"
        },
        "organizer_email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email of the event organizer",
          "title": "Organizer Email"
        },
        "organizer_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the event organizer",
          "title": "Organizer Name"
        },
        "recurring_event_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of recurring event if applicable",
          "title": "Recurring Event Id"
        },
        "start_time": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event start time in ISO format",
          "title": "Start Time"
        },
        "status": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event status (confirmed, tentative, cancelled)",
          "title": "Status"
        },
        "summary": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event title/summary",
          "title": "Summary"
        },
        "updated_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event was last updated",
          "title": "Updated At"
        },
        "visibility": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Event visibility",
          "title": "Visibility"
        }
      },
      "required": ["event_id", "event_type", "calendar_id"],
      "title": "GoogleCalendarEventSyncPayload",
      "type": "object"
    },
    "slug": "GOOGLESUPER_GOOGLE_CALENDAR_EVENT_SYNC_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "description": "Configuration for Google Drive trigger",
      "properties": {},
      "title": "DriveConfig",
      "type": "object"
    },
    "description": "Triggers when changes are detected in a Google Drive.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n    - Ensure you have set the necessary permissions to access Google Drive.\n    ",
    "name": "Google Drive Changes",
    "payload": {
      "description": "Schema for Google Drive trigger payload.\nCurrently no specific fields are present, but may include\nconfiguration options in the future.",
      "properties": {},
      "title": "DrivePayload",
      "type": "object"
    },
    "slug": "GOOGLESUPER_GOOGLE_DRIVE_CHANGES",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "labelIds": {
          "default": "INBOX",
          "description": "Filter messages by a single label ID. Labels identify the status or category of messages. Supported labels include 'INBOX', 'SPAM', 'TRASH', 'UNREAD', 'STARRED', 'IMPORTANT', 'CATEGORY_PERSONAL', 'CATEGORY_SOCIAL', 'CATEGORY_PROMOTIONS', 'CATEGORY_UPDATES', and 'CATEGORY_FORUMS'. For complex label filtering, use the 'query' parameter instead.",
          "examples": ["INBOX", "UNREAD", "STARRED"],
          "title": "Labelids",
          "type": "string"
        },
        "query": {
          "default": "",
          "description": "Advanced Gmail search using the same syntax as Gmail's search box. Use 'AND' for messages that match all conditions, 'OR' for any condition. Search by sender (from:email@domain.com), labels (label:inbox), status (is:unread), attachments (has:attachment), dates (after:2023/1/1), and more. If specified, this takes precedence over labelIds.",
          "examples": [
            "label:inbox OR label:sent",
            "from:example@gmail.com is:unread",
            "has:attachment after:2023/1/1",
            "is:important is:unread"
          ],
          "title": "Query",
          "type": "string"
        },
        "userId": {
          "default": "me",
          "description": "The user's email address or 'me' for the authenticated user.",
          "examples": ["me"],
          "title": "Userid",
          "type": "string"
        }
      },
      "title": "NewMessageConfig",
      "type": "object"
    },
    "description": "Triggers when a new message is received in Gmail.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Ensure that the Gmail API is enabled for your Google account.\n    - Provide the user ID (usually 'me' for the authenticated user).\n    - Optionally, provide label IDs to filter messages.\n    ",
    "name": "New Gmail Message Received Trigger",
    "payload": {
      "properties": {
        "attachment_list": {
          "anyOf": [{ "items": {}, "type": "array" }, { "type": "null" }],
          "default": null,
          "description": "The list of attachments in the message",
          "title": "Attachment List"
        },
        "message_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The message ID of the message",
          "title": "Message ID"
        },
        "message_text": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The text of the message",
          "title": "Message Text"
        },
        "message_timestamp": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The timestamp of the message",
          "title": "Message Timestamp"
        },
        "payload": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "The payload of the message",
          "title": "Payload"
        },
        "sender": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The sender of the message",
          "title": "Sender"
        },
        "subject": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The subject of the message",
          "title": "Subject"
        },
        "thread_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The thread ID of the message",
          "title": "Thread ID"
        },
        "to": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The recipient of the message",
          "title": "To"
        }
      },
      "title": "NewMessagePayload",
      "type": "object"
    },
    "slug": "GOOGLESUPER_NEW_GMAIL_MESSAGE",
    "type": "poll"
  },
  {
    "config": {
      "description": "Configuration for Google Sheets new rows polling",
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "sheet_name": {
          "default": "Sheet1",
          "description": "The name of the specific sheet within the spreadsheet to monitor",
          "examples": ["Sheet1", "Leads", "Contacts"],
          "title": "Sheet Name",
          "type": "string"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet to monitor",
          "examples": ["1BiexwqQYjfC_BXy6zDQYJqb6zxzRyP9"],
          "title": "Spreadsheet Id",
          "type": "string"
        },
        "start_row": {
          "default": 2,
          "description": "The row number to start monitoring from (1-indexed, typically 2 to skip headers)",
          "examples": [1, 2, 3],
          "minimum": 1,
          "title": "Start Row",
          "type": "integer"
        }
      },
      "required": ["spreadsheet_id"],
      "title": "GoogleSheetsNewRowsConfig",
      "type": "object"
    },
    "description": "Simple polling trigger that monitors Google Sheets for new rows.\n    Detects when new rows are added and returns the complete row data.\n    Perfect for triggering any workflow based on new sheet entries.",
    "instructions": "\n    **New Rows in Google Sheet (Polling):**\n    \n    - Monitors a Google Sheet for new rows added\n    - Returns complete row data for each new entry detected\n    - Configure sheet ID, sheet name, and starting row\n    - Perfect for triggering workflows on new data entries\n    - Set start_row to 2 if your sheet has headers\n    ",
    "name": "New Rows in Google Sheet",
    "payload": {
      "description": "Payload structure for new row detected in Google Sheets",
      "properties": {
        "detected_at": {
          "description": "ISO timestamp when the row was detected",
          "title": "Detected At",
          "type": "string"
        },
        "row_data": {
          "description": "Complete row data as list of strings",
          "items": { "type": "string" },
          "title": "Row Data",
          "type": "array"
        },
        "row_number": {
          "description": "The row number in the sheet (1-indexed)",
          "title": "Row Number",
          "type": "integer"
        },
        "sheet_name": { "description": "The sheet name", "title": "Sheet Name", "type": "string" },
        "spreadsheet_id": {
          "description": "The spreadsheet ID",
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": ["row_number", "row_data", "spreadsheet_id", "sheet_name", "detected_at"],
      "title": "GoogleSheetsNewRowPayload",
      "type": "object"
    },
    "slug": "GOOGLESUPER_NEW_ROWS_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "app_id": { "description": "The ID of the app.", "title": "App Id", "type": "string" }
      },
      "required": ["app_id"],
      "title": "HubspotBaseWebhookSchema",
      "type": "object"
    },
    "description": "Contact Created Trigger",
    "instructions": "",
    "name": "Contact Created Trigger",
    "payload": {
      "properties": {
        "objectId": {
          "description": "The ID of the object.",
          "title": "Objectid",
          "type": "string"
        },
        "subscriptionType": {
          "description": "The type of the event subscription.",
          "title": "Subscriptiontype",
          "type": "string"
        },
        "subscription_id": {
          "description": "The ID of the subscription.",
          "title": "Subscription Id",
          "type": "string"
        }
      },
      "required": ["objectId", "subscription_id", "subscriptionType"],
      "title": "HubspotBaseTriggerPayload",
      "type": "object"
    },
    "slug": "HUBSPOT_CONTACT_CREATED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "app_id": { "description": "The ID of the app.", "title": "App Id", "type": "string" }
      },
      "required": ["app_id"],
      "title": "HubspotBaseWebhookSchema",
      "type": "object"
    },
    "description": "Deal Stage Updated Trigger",
    "instructions": "",
    "name": "Deal Stage UpdatedTrigger",
    "payload": {
      "properties": {
        "objectId": {
          "description": "The ID of the object.",
          "title": "Objectid",
          "type": "string"
        },
        "subscriptionType": {
          "description": "The type of the event subscription.",
          "title": "Subscriptiontype",
          "type": "string"
        },
        "subscription_id": {
          "description": "The ID of the subscription.",
          "title": "Subscription Id",
          "type": "string"
        }
      },
      "required": ["objectId", "subscription_id", "subscriptionType"],
      "title": "HubspotBaseTriggerPayload",
      "type": "object"
    },
    "slug": "HUBSPOT_DEAL_STAGE_UPDATED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for new issue webhook",
      "properties": {
        "project_key": {
          "description": "The Jira project key to monitor",
          "title": "Project Key",
          "type": "string"
        }
      },
      "required": ["project_key"],
      "title": "NewIssueConfig",
      "type": "object"
    },
    "description": "Triggered when a new issue is created in Jira",
    "instructions": "",
    "name": "New Issue",
    "payload": {
      "description": "Data structure for new Jira issue events",
      "properties": {
        "assignee": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Username of the assignee",
          "title": "Assignee"
        },
        "created_at": {
          "description": "Timestamp when the issue was created",
          "title": "Created At",
          "type": "string"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Description of the issue",
          "title": "Description"
        },
        "issue_id": {
          "description": "The ID of the created issue",
          "title": "Issue Id",
          "type": "string"
        },
        "issue_key": {
          "description": "The key of the created issue",
          "title": "Issue Key",
          "type": "string"
        },
        "project_key": {
          "description": "The project key",
          "title": "Project Key",
          "type": "string"
        },
        "reporter": {
          "description": "Username of the reporter",
          "title": "Reporter",
          "type": "string"
        },
        "summary": { "description": "Summary of the issue", "title": "Summary", "type": "string" }
      },
      "required": ["issue_id", "issue_key", "summary", "reporter", "project_key", "created_at"],
      "title": "NewIssuePayload",
      "type": "object"
    },
    "slug": "JIRA_NEW_ISSUE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for new project webhook",
      "properties": {},
      "title": "NewProjectConfig",
      "type": "object"
    },
    "description": "Triggered when a new project is added in Jira",
    "instructions": "",
    "name": "New Project",
    "payload": {
      "description": "Data structure for new Jira project events",
      "properties": {
        "created_at": {
          "description": "Timestamp when the project was created",
          "title": "Created At",
          "type": "string"
        },
        "lead_name": {
          "description": "The username of the project lead",
          "title": "Lead Name",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the created project",
          "title": "Project Id",
          "type": "string"
        },
        "project_key": {
          "description": "The key of the created project",
          "title": "Project Key",
          "type": "string"
        },
        "project_name": {
          "description": "The name of the created project",
          "title": "Project Name",
          "type": "string"
        },
        "project_type": {
          "description": "The type of the created project",
          "title": "Project Type",
          "type": "string"
        }
      },
      "required": [
        "project_id",
        "project_key",
        "project_name",
        "project_type",
        "lead_name",
        "created_at"
      ],
      "title": "NewProjectPayload",
      "type": "object"
    },
    "slug": "JIRA_NEW_PROJECT_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for updated issue webhook",
      "properties": {
        "project_key": {
          "description": "The Jira project key to monitor",
          "title": "Project Key",
          "type": "string"
        }
      },
      "required": ["project_key"],
      "title": "UpdatedIssueConfig",
      "type": "object"
    },
    "description": "Triggered when an issue is updated in Jira",
    "instructions": "",
    "name": "Updated Issue",
    "payload": {
      "description": "Data structure for updated Jira issue events",
      "properties": {
        "assignee": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Username of the assignee",
          "title": "Assignee"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Description of the issue",
          "title": "Description"
        },
        "issue_id": {
          "description": "The ID of the updated issue",
          "title": "Issue Id",
          "type": "string"
        },
        "issue_key": {
          "description": "The key of the updated issue",
          "title": "Issue Key",
          "type": "string"
        },
        "project_key": {
          "description": "The project key",
          "title": "Project Key",
          "type": "string"
        },
        "reporter": {
          "description": "Username of the reporter",
          "title": "Reporter",
          "type": "string"
        },
        "summary": { "description": "Summary of the issue", "title": "Summary", "type": "string" },
        "updated_at": {
          "description": "Timestamp when the issue was updated",
          "title": "Updated At",
          "type": "string"
        },
        "updated_fields": {
          "description": "Fields that were updated",
          "title": "Updated Fields",
          "type": "object"
        }
      },
      "required": [
        "issue_id",
        "issue_key",
        "summary",
        "reporter",
        "project_key",
        "updated_at",
        "updated_fields"
      ],
      "title": "UpdatedIssuePayload",
      "type": "object"
    },
    "slug": "JIRA_UPDATED_ISSUE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "team_id": {
          "description": "ID of the team to filter issues by",
          "title": "Team Id",
          "type": "string"
        }
      },
      "required": ["team_id"],
      "title": "LinearTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a comment is received.",
    "instructions": "",
    "name": "Comment Received Trigger",
    "payload": {
      "properties": {
        "action": {
          "description": "Action that triggered the webhook",
          "title": "Action",
          "type": "string"
        },
        "data": { "description": "Data of the issue", "title": "Data", "type": "object" },
        "type": { "description": "Type of the issue", "title": "Type", "type": "string" },
        "url": { "description": "URL of the issue", "title": "Url", "type": "string" }
      },
      "required": ["action", "type", "url", "data"],
      "title": "LinearPayloadSchema",
      "type": "object"
    },
    "slug": "LINEAR_COMMENT_EVENT_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "team_id": {
          "description": "ID of the team to filter issues by",
          "title": "Team Id",
          "type": "string"
        }
      },
      "required": ["team_id"],
      "title": "LinearTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a new issue is created.",
    "instructions": "",
    "name": "Issue Created Trigger",
    "payload": {
      "properties": {
        "action": {
          "description": "Action that triggered the webhook",
          "title": "Action",
          "type": "string"
        },
        "data": { "description": "Data of the issue", "title": "Data", "type": "object" },
        "type": { "description": "Type of the issue", "title": "Type", "type": "string" },
        "url": { "description": "URL of the issue", "title": "Url", "type": "string" }
      },
      "required": ["action", "type", "url", "data"],
      "title": "LinearPayloadSchema",
      "type": "object"
    },
    "slug": "LINEAR_ISSUE_CREATED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "team_id": {
          "description": "ID of the team to filter issues by",
          "title": "Team Id",
          "type": "string"
        }
      },
      "required": ["team_id"],
      "title": "LinearTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when an issue is updated. For example labels are changed, issue status is changed, etc.",
    "instructions": "",
    "name": "Issue Updated Trigger",
    "payload": {
      "properties": {
        "action": {
          "description": "Action that triggered the webhook",
          "title": "Action",
          "type": "string"
        },
        "data": { "description": "Data of the issue", "title": "Data", "type": "object" },
        "type": { "description": "Type of the issue", "title": "Type", "type": "string" },
        "url": { "description": "URL of the issue", "title": "Url", "type": "string" }
      },
      "required": ["action", "type", "url", "data"],
      "title": "LinearPayloadSchema",
      "type": "object"
    },
    "slug": "LINEAR_ISSUE_UPDATED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for Mailchimp webhook",
      "properties": {
        "list_id": {
          "description": "The Mailchimp list/audience ID to monitor",
          "title": "List Id",
          "type": "string"
        }
      },
      "required": ["list_id"],
      "title": "MailchimpTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a campaign is sent or experiences an event in Mailchimp",
    "instructions": "",
    "name": "Campaign Trigger",
    "payload": {
      "description": "Base class for Mailchimp payloads",
      "properties": {
        "email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email address of the subscriber",
          "title": "Email"
        },
        "event_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Type of event",
          "title": "Event Type"
        },
        "list_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the list/audience",
          "title": "List Id"
        },
        "merge_fields": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "Custom merge fields/data",
          "title": "Merge Fields"
        },
        "timestamp": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event occurred",
          "title": "Timestamp"
        }
      },
      "title": "MailchimpBasePayload",
      "type": "object"
    },
    "slug": "MAILCHIMP_MAILCHIMP_CAMPAIGN_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for Mailchimp webhook",
      "properties": {
        "list_id": {
          "description": "The Mailchimp list/audience ID to monitor",
          "title": "List Id",
          "type": "string"
        }
      },
      "required": ["list_id"],
      "title": "MailchimpTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a subscriber's profile is updated in Mailchimp",
    "instructions": "",
    "name": "Profile Update Trigger",
    "payload": {
      "description": "Base class for Mailchimp payloads",
      "properties": {
        "email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email address of the subscriber",
          "title": "Email"
        },
        "event_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Type of event",
          "title": "Event Type"
        },
        "list_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the list/audience",
          "title": "List Id"
        },
        "merge_fields": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "Custom merge fields/data",
          "title": "Merge Fields"
        },
        "timestamp": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event occurred",
          "title": "Timestamp"
        }
      },
      "title": "MailchimpBasePayload",
      "type": "object"
    },
    "slug": "MAILCHIMP_MAILCHIMP_PROFILE_UPDATE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for Mailchimp webhook",
      "properties": {
        "list_id": {
          "description": "The Mailchimp list/audience ID to monitor",
          "title": "List Id",
          "type": "string"
        }
      },
      "required": ["list_id"],
      "title": "MailchimpTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a subscriber subscribes to Mailchimp",
    "instructions": "",
    "name": "Subscribe Trigger",
    "payload": {
      "description": "Base class for Mailchimp payloads",
      "properties": {
        "email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email address of the subscriber",
          "title": "Email"
        },
        "event_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Type of event",
          "title": "Event Type"
        },
        "list_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the list/audience",
          "title": "List Id"
        },
        "merge_fields": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "Custom merge fields/data",
          "title": "Merge Fields"
        },
        "timestamp": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event occurred",
          "title": "Timestamp"
        }
      },
      "title": "MailchimpBasePayload",
      "type": "object"
    },
    "slug": "MAILCHIMP_MAILCHIMP_SUBSCRIBE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for Mailchimp webhook",
      "properties": {
        "list_id": {
          "description": "The Mailchimp list/audience ID to monitor",
          "title": "List Id",
          "type": "string"
        }
      },
      "required": ["list_id"],
      "title": "MailchimpTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a subscriber unsubscribes from Mailchimp",
    "instructions": "",
    "name": "Unsubscribe Trigger",
    "payload": {
      "description": "Base class for Mailchimp payloads",
      "properties": {
        "email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email address of the subscriber",
          "title": "Email"
        },
        "event_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Type of event",
          "title": "Event Type"
        },
        "list_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the list/audience",
          "title": "List Id"
        },
        "merge_fields": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "Custom merge fields/data",
          "title": "Merge Fields"
        },
        "timestamp": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the event occurred",
          "title": "Timestamp"
        }
      },
      "title": "MailchimpBasePayload",
      "type": "object"
    },
    "slug": "MAILCHIMP_MAILCHIMP_UNSUBSCRIBE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "database_id": {
          "description": "The ID of the database",
          "title": "Database Id",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "required": ["database_id"],
      "title": "PageAddedToDatabaseConfig",
      "type": "object"
    },
    "description": "Triggers when a new page is added to a Notion database.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - You can get the database id by going to your Notion table/database and\n    - copying it from there.\n    - You can also use the NOTION_FETCH_DATA action to get the database ID and title of all databases accessible to the integration\n    ",
    "name": "New Page",
    "payload": {
      "description": "Payload model for Notion page events.",
      "properties": {
        "event_type": {
          "default": "page_added",
          "description": "Type of Notion page event",
          "title": "Event Type",
          "type": "string"
        },
        "page": {
          "description": "The Notion page that was added",
          "title": "Page",
          "type": "object"
        }
      },
      "required": ["page"],
      "title": "NotionPagePayload",
      "type": "object"
    },
    "slug": "NOTION_PAGE_ADDED_TO_DATABASE",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "parent_page_id": {
          "description": "The ID of the parent Notion page to monitor for new subpages",
          "title": "Parent Page Id",
          "type": "string"
        }
      },
      "required": ["parent_page_id"],
      "title": "PageAddedConfig",
      "type": "object"
    },
    "description": "Fires when a new subpage (a `child_page` type block) is added under a specified parent Notion page.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Provide the parent page ID from your Notion workspace.\n    - This trigger will monitor that parent page for newly created subpages (child_page blocks).\n    - You can also use the NOTION_FETCH_DATA action to get the page ID and title of all pages accessible to the integration\n    ",
    "name": "Page Added to Page",
    "payload": {
      "description": "Represents the event payload when a Notion block is added.",
      "properties": {
        "block": {
          "description": "The Notion block that was added",
          "title": "Block",
          "type": "object"
        },
        "event_type": {
          "default": "block_added",
          "description": "Type of Notion block event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["block"],
      "title": "NotionBlockPayload",
      "type": "object"
    },
    "slug": "NOTION_PAGE_ADDED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "page_id": {
          "description": "The ID of the Notion page to monitor",
          "title": "Page Id",
          "type": "string"
        }
      },
      "required": ["page_id"],
      "title": "PageUpdateConfig",
      "type": "object"
    },
    "description": "Triggers when any block within a specified Notion page is updated.",
    "instructions": "",
    "name": "Page Updated",
    "payload": {
      "description": "Represents the payload for a Notion block update event.",
      "properties": {
        "block": {
          "description": "The Notion block that was updated",
          "title": "Block",
          "type": "object"
        },
        "event_type": {
          "default": "block_updated",
          "description": "Type of Notion block event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["block"],
      "title": "NotionBlockPayload",
      "type": "object"
    },
    "slug": "NOTION_PAGE_UPDATED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "drive_path": {
          "default": "/",
          "description": "The path in OneDrive to monitor for changes. Default is root.",
          "title": "Drive Path",
          "type": "string"
        },
        "include_deleted": {
          "default": true,
          "description": "Whether to include deleted items in the changes",
          "title": "Include Deleted",
          "type": "boolean"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "OneDriveChangeConfig",
      "type": "object"
    },
    "description": "Triggers when a new file is created in OneDrive.\n    Uses Gmail-style state management for reliable duplicate prevention.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Ensure that OneDrive API access is configured for your account.\n    - This trigger will monitor for newly created files in your OneDrive.\n    - Use `include_folders` to also detect folder creation events.\n    - The trigger uses timestamp filtering and duplicate prevention like Gmail triggers.\n    ",
    "name": "OneDrive File Created Trigger",
    "payload": {
      "$defs": {
        "OneDriveItemSchema": {
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "description": "Payload model for OneDrive change events.",
      "properties": {
        "event_type": {
          "description": "Type of change event (created, modified, deleted)",
          "title": "Event Type",
          "type": "string"
        },
        "item": {
          "description": "The OneDrive item that changed",
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "required": ["item", "event_type"],
      "title": "OneDriveChangePayload",
      "type": "object"
    },
    "slug": "ONE_DRIVE_ONE_DRIVE_FILE_CREATED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "drive_path": {
          "default": "/",
          "description": "The path in OneDrive to monitor for changes. Default is root.",
          "title": "Drive Path",
          "type": "string"
        },
        "include_deleted": {
          "default": true,
          "description": "Whether to include deleted items in the changes",
          "title": "Include Deleted",
          "type": "boolean"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "OneDriveChangeConfig",
      "type": "object"
    },
    "description": "Triggers when a new folder is created in OneDrive.\n    Uses Gmail-style state management for reliable duplicate prevention.",
    "instructions": "",
    "name": "OneDrive Folder Created Trigger",
    "payload": {
      "$defs": {
        "OneDriveItemSchema": {
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "description": "Payload model for OneDrive change events.",
      "properties": {
        "event_type": {
          "description": "Type of change event (created, modified, deleted)",
          "title": "Event Type",
          "type": "string"
        },
        "item": {
          "description": "The OneDrive item that changed",
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "required": ["item", "event_type"],
      "title": "OneDriveChangePayload",
      "type": "object"
    },
    "slug": "ONE_DRIVE_ONE_DRIVE_FOLDER_CREATED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "drive_path": {
          "default": "/",
          "description": "The path in OneDrive to monitor for changes. Default is root.",
          "title": "Drive Path",
          "type": "string"
        },
        "include_deleted": {
          "default": true,
          "description": "Whether to include deleted items in the changes",
          "title": "Include Deleted",
          "type": "boolean"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "OneDriveChangeConfig",
      "type": "object"
    },
    "description": "Triggers when a file or folder is deleted in OneDrive.\n    Uses Gmail-style state management for reliable duplicate prevention.",
    "instructions": "",
    "name": "OneDrive Item Deleted Trigger",
    "payload": {
      "$defs": {
        "OneDriveItemSchema": {
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "description": "Payload model for OneDrive change events.",
      "properties": {
        "event_type": {
          "description": "Type of change event (created, modified, deleted)",
          "title": "Event Type",
          "type": "string"
        },
        "item": {
          "description": "The OneDrive item that changed",
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "required": ["item", "event_type"],
      "title": "OneDriveChangePayload",
      "type": "object"
    },
    "slug": "ONE_DRIVE_ONE_DRIVE_ITEM_DELETED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "drive_path": {
          "default": "/",
          "description": "The path in OneDrive to monitor for changes. Default is root.",
          "title": "Drive Path",
          "type": "string"
        },
        "include_deleted": {
          "default": true,
          "description": "Whether to include deleted items in the changes",
          "title": "Include Deleted",
          "type": "boolean"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "OneDriveChangeConfig",
      "type": "object"
    },
    "description": "Triggers when an existing file or folder is modified in OneDrive.\n    Uses Gmail-style state management and only detects actual modifications, not new creations.",
    "instructions": "",
    "name": "OneDrive Item Updated Trigger",
    "payload": {
      "$defs": {
        "OneDriveItemSchema": {
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "description": "Payload model for OneDrive change events.",
      "properties": {
        "event_type": {
          "description": "Type of change event (created, modified, deleted)",
          "title": "Event Type",
          "type": "string"
        },
        "item": {
          "description": "The OneDrive item that changed",
          "properties": {
            "created_time": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Creation timestamp",
              "title": "Created Time"
            },
            "deleted": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "default": false,
              "description": "Whether the item was deleted",
              "title": "Deleted"
            },
            "item_id": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the item",
              "title": "Item Id"
            },
            "last_modified": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "Last modified timestamp",
              "title": "Last Modified"
            },
            "name": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The name of the item",
              "title": "Name"
            },
            "payload": {
              "default": {},
              "description": "The full item payload from OneDrive",
              "title": "Payload",
              "type": "object"
            },
            "size": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "Size of the item in bytes",
              "title": "Size"
            },
            "type": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The type of the item (file or folder)",
              "title": "Type"
            },
            "web_url": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The web URL of the item",
              "title": "Web Url"
            }
          },
          "title": "OneDriveItemSchema",
          "type": "object"
        }
      },
      "required": ["item", "event_type"],
      "title": "OneDriveChangePayload",
      "type": "object"
    },
    "slug": "ONE_DRIVE_ONE_DRIVE_ITEM_UPDATED_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "OutlookTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a new contact is added in the Outlook contacts.",
    "instructions": "",
    "name": "New Contact Added",
    "payload": {
      "description": "Base class for Outlook payloads",
      "properties": {
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" },
        "id": {
          "description": "The unique identifier for the message",
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["id", "event_type"],
      "title": "OutlookBasePayload",
      "type": "object"
    },
    "slug": "OUTLOOK_OUTLOOK_CONTACT_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "OutlookTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a new calendar event occurs (created, updated, or deleted) in the Outlook calendar.",
    "instructions": "",
    "name": "Calendar Event Changes",
    "payload": {
      "description": "Base class for Outlook payloads",
      "properties": {
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" },
        "id": {
          "description": "The unique identifier for the message",
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["id", "event_type"],
      "title": "OutlookBasePayload",
      "type": "object"
    },
    "slug": "OUTLOOK_OUTLOOK_EVENT_CHANGE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "OutlookTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a new calendar event is created in the Outlook calendar.",
    "instructions": "",
    "name": "New Calendar Event",
    "payload": {
      "description": "Base class for Outlook payloads",
      "properties": {
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" },
        "id": {
          "description": "The unique identifier for the message",
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["id", "event_type"],
      "title": "OutlookBasePayload",
      "type": "object"
    },
    "slug": "OUTLOOK_OUTLOOK_EVENT_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "OutlookTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a new message is received in the Outlook mailbox.",
    "instructions": "",
    "name": "New Outlook Message",
    "payload": {
      "description": "Base class for Outlook payloads",
      "properties": {
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" },
        "id": {
          "description": "The unique identifier for the message",
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["id", "event_type"],
      "title": "OutlookBasePayload",
      "type": "object"
    },
    "slug": "OUTLOOK_OUTLOOK_MESSAGE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "OutlookTriggerConfig",
      "type": "object"
    },
    "description": "Triggered when a new message is sent from the Outlook mailbox.",
    "instructions": "",
    "name": "New Sent Message",
    "payload": {
      "description": "Base class for Outlook payloads",
      "properties": {
        "event_type": { "description": "Type of event", "title": "Event Type", "type": "string" },
        "id": {
          "description": "The unique identifier for the message",
          "title": "Id",
          "type": "string"
        }
      },
      "required": ["id", "event_type"],
      "title": "OutlookBasePayload",
      "type": "object"
    },
    "slug": "OUTLOOK_OUTLOOK_SENT_MESSAGE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for new deal webhook",
      "properties": {},
      "title": "PipedriveNewDealConfig",
      "type": "object"
    },
    "description": "Triggered when a new deal is created in Pipedrive",
    "instructions": "",
    "name": "New Deal Received Trigger",
    "payload": {
      "description": "Data structure for deal events",
      "properties": {
        "currency": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Currency of the deal",
          "title": "Currency"
        },
        "id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the deal",
          "title": "Id"
        },
        "stage_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the pipeline stage",
          "title": "Stage Id"
        },
        "status": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Status of the deal",
          "title": "Status"
        },
        "title": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Title of the deal",
          "title": "Title"
        },
        "user_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the user who created the deal",
          "title": "User Id"
        },
        "value": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Value of the deal",
          "title": "Value"
        }
      },
      "title": "PipedriveDealPayload",
      "type": "object"
    },
    "slug": "PIPEDRIVE_PIPEDRIVE_NEW_DEAL_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for new note webhook",
      "properties": {},
      "title": "PipedriveNewNoteConfig",
      "type": "object"
    },
    "description": "Triggered when a new note is created in Pipedrive",
    "instructions": "",
    "name": "New Note Received Trigger",
    "payload": {
      "description": "Data structure for note events",
      "properties": {
        "add_time": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Time when the note was added",
          "title": "Add Time"
        },
        "content": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Content of the note",
          "title": "Content"
        },
        "deal_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the associated deal",
          "title": "Deal Id"
        },
        "id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the note",
          "title": "Id"
        },
        "org_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the associated organization",
          "title": "Org Id"
        },
        "person_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the associated person",
          "title": "Person Id"
        },
        "user_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the user who created the note",
          "title": "User Id"
        }
      },
      "title": "PipedriveNotePayload",
      "type": "object"
    },
    "slug": "PIPEDRIVE_PIPEDRIVE_NEW_NOTE_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for new organization webhook",
      "properties": {},
      "title": "PipedriveNewOrganizationConfig",
      "type": "object"
    },
    "description": "Triggered when a new organization is created in Pipedrive",
    "instructions": "",
    "name": "New Organization Received Trigger",
    "payload": {
      "description": "Data structure for organization events",
      "properties": {
        "address": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Address of the organization",
          "title": "Address"
        },
        "email": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Email of the organization",
          "title": "Email"
        },
        "id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the organization",
          "title": "Id"
        },
        "name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the organization",
          "title": "Name"
        },
        "owner_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the organization owner",
          "title": "Owner Id"
        },
        "phone": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Phone number of the organization",
          "title": "Phone"
        },
        "web": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Website of the organization",
          "title": "Web"
        }
      },
      "title": "PipedriveOrganizationPayload",
      "type": "object"
    },
    "slug": "PIPEDRIVE_PIPEDRIVE_NEW_ORGANIZATION_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "NewContactConfig",
      "type": "object"
    },
    "description": "Triggers when a new Contact is Created in Salesforce.",
    "instructions": "",
    "name": "New Contact Trigger",
    "payload": {
      "$defs": {
        "ContactSchema": {
          "description": "Schema for a Salesforce contact.",
          "properties": {
            "created_date": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "When the contact was created",
              "title": "Created Date"
            },
            "id": { "description": "The ID of the contact", "title": "Id", "type": "string" },
            "name": { "description": "The name of the contact", "title": "Name", "type": "string" }
          },
          "required": ["id", "name"],
          "title": "ContactSchema",
          "type": "object"
        }
      },
      "description": "Payload model for Salesforce contact events.",
      "properties": {
        "contact": {
          "description": "The Salesforce contact that was created",
          "properties": {
            "created_date": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "When the contact was created",
              "title": "Created Date"
            },
            "id": { "description": "The ID of the contact", "title": "Id", "type": "string" },
            "name": { "description": "The name of the contact", "title": "Name", "type": "string" }
          },
          "required": ["id", "name"],
          "title": "ContactSchema",
          "type": "object"
        },
        "event_type": {
          "default": "new_contact",
          "description": "Type of Salesforce contact event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["contact"],
      "title": "ContactPayload",
      "type": "object"
    },
    "slug": "SALESFORCE_NEW_CONTACT_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "NewLeadConfigSchema",
      "type": "object"
    },
    "description": "Triggers when a new Lead is created in Salesforce.",
    "instructions": "",
    "name": "New Lead Trigger",
    "payload": {
      "$defs": {
        "LeadSchema": {
          "description": "Schema for a Salesforce lead.",
          "properties": {
            "created_date": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "When the lead was created",
              "title": "Created Date"
            },
            "id": { "description": "The ID of the lead", "title": "Id", "type": "string" },
            "name": { "description": "The name of the lead", "title": "Name", "type": "string" }
          },
          "required": ["id", "name"],
          "title": "LeadSchema",
          "type": "object"
        }
      },
      "description": "Payload model for Salesforce lead events.",
      "properties": {
        "event_type": {
          "default": "new_lead",
          "description": "Type of Salesforce lead event",
          "title": "Event Type",
          "type": "string"
        },
        "lead": {
          "description": "The Salesforce lead that was created",
          "properties": {
            "created_date": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "When the lead was created",
              "title": "Created Date"
            },
            "id": { "description": "The ID of the lead", "title": "Id", "type": "string" },
            "name": { "description": "The name of the lead", "title": "Name", "type": "string" }
          },
          "required": ["id", "name"],
          "title": "LeadSchema",
          "type": "object"
        }
      },
      "required": ["lead"],
      "title": "LeadPayload",
      "type": "object"
    },
    "slug": "SALESFORCE_NEW_LEAD_TRIGGER",
    "type": "poll"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new channel is created in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `channel_created` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "New Channel Created Trigger",
    "payload": {
      "properties": {
        "created": {
          "description": "The timestamp of when the channel was created, formatted as a Unix timestamp",
          "title": "Created",
          "type": "integer"
        },
        "creator": {
          "description": "The ID of the user who created the channel",
          "title": "Creator",
          "type": "string"
        },
        "id": { "description": "The ID of the channel", "title": "Id", "type": "string" },
        "name": { "description": "The name of the channel", "title": "Name", "type": "string" }
      },
      "required": ["id", "name", "creator", "created"],
      "title": "ChannelCreatedPayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_CHANNEL_CREATED",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a Slack channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `reaction_added` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "Reaction Added Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "event_ts": {
          "description": "The timestamp of the reaction event. Formatted as a Unix timestamp",
          "title": "Event Ts",
          "type": "string"
        },
        "message_channel": {
          "description": "The ID of the channel where the message that was reacted to is located",
          "title": "Message Channel",
          "type": "string"
        },
        "message_ts": {
          "description": "The timestamp of the message that was reacted to. Formatted as a Unix timestamp",
          "title": "Message Ts",
          "type": "string"
        },
        "message_user": {
          "description": "The ID of the user who owns the message that was reacted to",
          "title": "Message User",
          "type": "string"
        },
        "reaction": {
          "description": "The type of reaction that was added",
          "title": "Reaction",
          "type": "string"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who added the reaction",
          "title": "User"
        }
      },
      "required": [
        "user",
        "reaction",
        "message_user",
        "message_channel",
        "message_ts",
        "event_ts",
        "team_id",
        "bot_id",
        "channel_type"
      ],
      "title": "ReactionAddedPayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_REACTION_ADDED",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a reaction is removed from a message.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `reaction_removed` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "Reaction Removed Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "event_ts": {
          "description": "The timestamp of the reaction event. Formatted as a Unix timestamp",
          "title": "Event Ts",
          "type": "string"
        },
        "message_channel": {
          "description": "The ID of the channel where the message that was reacted to is located",
          "title": "Message Channel",
          "type": "string"
        },
        "message_ts": {
          "description": "The timestamp of the message that was reacted to. Formatted as a Unix timestamp",
          "title": "Message Ts",
          "type": "string"
        },
        "message_user": {
          "description": "The ID of the user who owns the message that was reacted to",
          "title": "Message User",
          "type": "string"
        },
        "reaction": {
          "description": "The type of reaction that was added",
          "title": "Reaction",
          "type": "string"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who added the reaction",
          "title": "User"
        }
      },
      "required": [
        "user",
        "reaction",
        "message_user",
        "message_channel",
        "message_ts",
        "event_ts",
        "team_id",
        "bot_id",
        "channel_type"
      ],
      "title": "ReactionRemovedPayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_REACTION_REMOVED",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new bot message is posted to a Slack channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.channels` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "New Bot Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id",
          "type": "string"
        },
        "channel": {
          "description": "The ID of the channel where the bot message was posted",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of the channel where the bot message was posted",
          "title": "Channel Type"
        },
        "subtype": {
          "description": "The subtype of the message (should be 'bot_message')",
          "title": "Subtype",
          "type": "string"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the team where the bot message was posted",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the bot message",
          "title": "Text",
          "type": "string"
        },
        "ts": {
          "description": "The timestamp of the bot message",
          "title": "Ts",
          "type": "string"
        },
        "username": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The username of the bot that posted the message",
          "title": "Username"
        }
      },
      "required": ["channel", "bot_id", "text", "ts", "subtype"],
      "title": "BotMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_RECEIVE_BOT_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new direct message (DM) is sent to a user in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.im` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n\n\nTo use this trigger, ensure your Slack integration has the `im:history` OAuth scope.",
    "name": "New Direct Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that sent the direct message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the direct message channel",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel (should be 'im' for direct messages)",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the direct message was sent",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the direct message",
          "title": "Text",
          "type": "string"
        },
        "ts": {
          "description": "The timestamp of the direct message",
          "title": "Ts",
          "type": "string"
        },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who sent the direct message",
          "title": "User"
        }
      },
      "required": ["channel", "user", "text", "ts", "team_id", "bot_id", "channel_type"],
      "title": "DirectMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_RECEIVE_DIRECT_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a private channel in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.groups` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n\n\nTo use this trigger, ensure your Slack app has the `groups:history` OAuth scope. You can add this scope when creating or configuring your Slack app in the App Settings > OAuth & Permissions section.",
    "name": "New Private Channel Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that sent the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the private channel",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel (should be 'group' for private channels)",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was sent",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the message",
          "title": "Text",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who sent the message in the private channel",
          "title": "User"
        }
      },
      "required": ["channel", "user", "text", "ts", "team_id", "bot_id", "channel_type"],
      "title": "GroupMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_RECEIVE_GROUP_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a Slack channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.channels` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "New Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the channel where the message was posted",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the message",
          "title": "Text",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the user who posted the message",
          "title": "User"
        }
      },
      "required": ["channel", "text", "ts"],
      "title": "MessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_RECEIVE_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a multi-person direct message in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.mpim` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n\n\nTo use this trigger, ensure your Slack app has the `mpim:history` OAuth scope.",
    "name": "New Multi-Person Direct Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that sent the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the multi-person direct message channel",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel (should be 'mpim' for multi-person direct messages)",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was sent",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the message",
          "title": "Text",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who sent the message in the multi-person direct message",
          "title": "User"
        }
      },
      "required": ["channel", "user", "text", "ts", "team_id", "bot_id", "channel_type"],
      "title": "MpimMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_RECEIVE_MPIM_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when reply is added to a message in a thread.\n    Excludes the parent message_replied event by design (ts != thread_ts check).",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.channels` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "Thread Reply Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the channel where the message was posted",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "parent_user_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the user who posted the parent message",
          "title": "Parent User Id"
        },
        "reply_count": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "default": null,
          "description": "The number of replies in the thread",
          "title": "Reply Count"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "text": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The text content of the message (may be None for block-only replies)",
          "title": "Text"
        },
        "thread_ts": {
          "description": "The timestamp of the parent message in the thread",
          "title": "Thread Ts",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the user who posted the message",
          "title": "User"
        }
      },
      "required": ["channel", "ts", "thread_ts"],
      "title": "ThreadReplyPayloadSchema",
      "type": "object"
    },
    "slug": "SLACKBOT_RECEIVE_THREAD_REPLY",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new channel is created in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `channel_created` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "New Channel Created Trigger",
    "payload": {
      "properties": {
        "created": {
          "description": "The timestamp of when the channel was created, formatted as a Unix timestamp",
          "title": "Created",
          "type": "integer"
        },
        "creator": {
          "description": "The ID of the user who created the channel",
          "title": "Creator",
          "type": "string"
        },
        "id": { "description": "The ID of the channel", "title": "Id", "type": "string" },
        "name": { "description": "The name of the channel", "title": "Name", "type": "string" }
      },
      "required": ["id", "name", "creator", "created"],
      "title": "ChannelCreatedPayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_CHANNEL_CREATED",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a Slack channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `reaction_added` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "Reaction Added Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "event_ts": {
          "description": "The timestamp of the reaction event. Formatted as a Unix timestamp",
          "title": "Event Ts",
          "type": "string"
        },
        "message_channel": {
          "description": "The ID of the channel where the message that was reacted to is located",
          "title": "Message Channel",
          "type": "string"
        },
        "message_ts": {
          "description": "The timestamp of the message that was reacted to. Formatted as a Unix timestamp",
          "title": "Message Ts",
          "type": "string"
        },
        "message_user": {
          "description": "The ID of the user who owns the message that was reacted to",
          "title": "Message User",
          "type": "string"
        },
        "reaction": {
          "description": "The type of reaction that was added",
          "title": "Reaction",
          "type": "string"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who added the reaction",
          "title": "User"
        }
      },
      "required": [
        "user",
        "reaction",
        "message_user",
        "message_channel",
        "message_ts",
        "event_ts",
        "team_id",
        "bot_id",
        "channel_type"
      ],
      "title": "ReactionAddedPayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_REACTION_ADDED",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a reaction is removed from a message.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `reaction_removed` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "Reaction Removed Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "event_ts": {
          "description": "The timestamp of the reaction event. Formatted as a Unix timestamp",
          "title": "Event Ts",
          "type": "string"
        },
        "message_channel": {
          "description": "The ID of the channel where the message that was reacted to is located",
          "title": "Message Channel",
          "type": "string"
        },
        "message_ts": {
          "description": "The timestamp of the message that was reacted to. Formatted as a Unix timestamp",
          "title": "Message Ts",
          "type": "string"
        },
        "message_user": {
          "description": "The ID of the user who owns the message that was reacted to",
          "title": "Message User",
          "type": "string"
        },
        "reaction": {
          "description": "The type of reaction that was added",
          "title": "Reaction",
          "type": "string"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who added the reaction",
          "title": "User"
        }
      },
      "required": [
        "user",
        "reaction",
        "message_user",
        "message_channel",
        "message_ts",
        "event_ts",
        "team_id",
        "bot_id",
        "channel_type"
      ],
      "title": "ReactionRemovedPayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_REACTION_REMOVED",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new bot message is posted to a Slack channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.channels` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "New Bot Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id",
          "type": "string"
        },
        "channel": {
          "description": "The ID of the channel where the bot message was posted",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of the channel where the bot message was posted",
          "title": "Channel Type"
        },
        "subtype": {
          "description": "The subtype of the message (should be 'bot_message')",
          "title": "Subtype",
          "type": "string"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the team where the bot message was posted",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the bot message",
          "title": "Text",
          "type": "string"
        },
        "ts": {
          "description": "The timestamp of the bot message",
          "title": "Ts",
          "type": "string"
        },
        "username": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The username of the bot that posted the message",
          "title": "Username"
        }
      },
      "required": ["channel", "bot_id", "text", "ts", "subtype"],
      "title": "BotMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_RECEIVE_BOT_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new direct message (DM) is sent to a user in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.im` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n\n\nTo use this trigger, ensure your Slack integration has the `im:history` OAuth scope.",
    "name": "New Direct Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that sent the direct message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the direct message channel",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel (should be 'im' for direct messages)",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the direct message was sent",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the direct message",
          "title": "Text",
          "type": "string"
        },
        "ts": {
          "description": "The timestamp of the direct message",
          "title": "Ts",
          "type": "string"
        },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who sent the direct message",
          "title": "User"
        }
      },
      "required": ["channel", "user", "text", "ts", "team_id", "bot_id", "channel_type"],
      "title": "DirectMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_RECEIVE_DIRECT_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a private channel in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.groups` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n\n\nTo use this trigger, ensure your Slack app has the `groups:history` OAuth scope. You can add this scope when creating or configuring your Slack app in the App Settings > OAuth & Permissions section.",
    "name": "New Private Channel Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that sent the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the private channel",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel (should be 'group' for private channels)",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was sent",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the message",
          "title": "Text",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who sent the message in the private channel",
          "title": "User"
        }
      },
      "required": ["channel", "user", "text", "ts", "team_id", "bot_id", "channel_type"],
      "title": "GroupMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_RECEIVE_GROUP_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a Slack channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.channels` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "New Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the channel where the message was posted",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the message",
          "title": "Text",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the user who posted the message",
          "title": "User"
        }
      },
      "required": ["channel", "text", "ts"],
      "title": "MessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_RECEIVE_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when a new message is posted to a multi-person direct message in Slack.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.mpim` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n\n\nTo use this trigger, ensure your Slack app has the `mpim:history` OAuth scope.",
    "name": "New Multi-Person Direct Message Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the bot that sent the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the multi-person direct message channel",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The type of the channel (should be 'mpim' for multi-person direct messages)",
          "title": "Channel Type"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the team where the message was sent",
          "title": "Team Id"
        },
        "text": {
          "description": "The text content of the message",
          "title": "Text",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "description": "The ID of the user who sent the message in the multi-person direct message",
          "title": "User"
        }
      },
      "required": ["channel", "user", "text", "ts", "team_id", "bot_id", "channel_type"],
      "title": "MpimMessagePayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_RECEIVE_MPIM_MESSAGE",
    "type": "webhook"
  },
  {
    "config": { "properties": {}, "title": "SlackWebhookConfig", "type": "object" },
    "description": "Triggered when reply is added to a message in a thread.\n    Excludes the parent message_replied event by design (ts != thread_ts check).",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - If you are using your own Slack app:\n        1. Go to the 'Event Subscriptions' section of your app's settings.\n        2. Enable events.\n        3. Input the 'Request URL' field with `{{webhook_url}}`\n        4. Add `message.channels` to the 'Subscribe to bot events' section and\n          `Subscribe to events on behalf of users` section and save.\n    - If you are using the Composio Slack app, you are all set here!\n    - If you are using Slackbot integration, you would need to add the Slack\n      app to the channels you want to monitor. In case using Composio Slack app,\n      you need to do /add and then choose Composio App.\n",
    "name": "Thread Reply Received Trigger",
    "payload": {
      "properties": {
        "bot_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the bot that posted the message",
          "title": "Bot Id"
        },
        "channel": {
          "description": "The ID of the channel where the message was posted",
          "title": "Channel",
          "type": "string"
        },
        "channel_type": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The type of the channel where the message was posted",
          "title": "Channel Type"
        },
        "parent_user_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the user who posted the parent message",
          "title": "Parent User Id"
        },
        "reply_count": {
          "anyOf": [{ "type": "integer" }, { "type": "null" }],
          "default": null,
          "description": "The number of replies in the thread",
          "title": "Reply Count"
        },
        "team_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the team where the message was posted",
          "title": "Team Id"
        },
        "text": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The text content of the message (may be None for block-only replies)",
          "title": "Text"
        },
        "thread_ts": {
          "description": "The timestamp of the parent message in the thread",
          "title": "Thread Ts",
          "type": "string"
        },
        "ts": { "description": "The timestamp of the message", "title": "Ts", "type": "string" },
        "user": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "The ID of the user who posted the message",
          "title": "User"
        }
      },
      "required": ["channel", "ts", "thread_ts"],
      "title": "ThreadReplyPayloadSchema",
      "type": "object"
    },
    "slug": "SLACK_RECEIVE_THREAD_REPLY",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "StripeWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when a direct charge fails in Stripe's legacy Charges API",
    "instructions": "",
    "name": "Charge Failed Trigger",
    "payload": {
      "description": "Base class for Stripe payloads",
      "properties": {
        "body": { "description": "The entire event payload", "title": "Body" },
        "event_type": {
          "description": "The type of event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["body", "event_type"],
      "title": "StripeBasePayload",
      "type": "object"
    },
    "slug": "STRIPE_STRIPE_CHARGE_FAILED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "StripeWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when a checkout session is completed in Stripe",
    "instructions": "",
    "name": "Checkout Session Completed Trigger",
    "payload": {
      "description": "Base class for Stripe payloads",
      "properties": {
        "body": { "description": "The entire event payload", "title": "Body" },
        "event_type": {
          "description": "The type of event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["body", "event_type"],
      "title": "StripeBasePayload",
      "type": "object"
    },
    "slug": "STRIPE_STRIPE_CHECKOUT_SESSION_COMPLETED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "StripeWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when an invoice payment is successful in Stripe",
    "instructions": "",
    "name": "Invoice Payment Succeeded Trigger",
    "payload": {
      "description": "Base class for Stripe payloads",
      "properties": {
        "body": { "description": "The entire event payload", "title": "Body" },
        "event_type": {
          "description": "The type of event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["body", "event_type"],
      "title": "StripeBasePayload",
      "type": "object"
    },
    "slug": "STRIPE_STRIPE_INVOICE_PAYMENT_SUCCEEDED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "StripeWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when a payment intent fails in Stripe",
    "instructions": "",
    "name": "Payment Intent Failed Trigger",
    "payload": {
      "description": "Base class for Stripe payloads",
      "properties": {
        "body": { "description": "The entire event payload", "title": "Body" },
        "event_type": {
          "description": "The type of event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["body", "event_type"],
      "title": "StripeBasePayload",
      "type": "object"
    },
    "slug": "STRIPE_STRIPE_PAYMENT_FAILED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "StripeWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when a product is created in Stripe",
    "instructions": "",
    "name": "Product Created Trigger",
    "payload": {
      "description": "Base class for Stripe payloads",
      "properties": {
        "body": { "description": "The entire event payload", "title": "Body" },
        "event_type": {
          "description": "The type of event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["body", "event_type"],
      "title": "StripeBasePayload",
      "type": "object"
    },
    "slug": "STRIPE_STRIPE_PRODUCT_CREATED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "StripeWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when a subscription is added in Stripe",
    "instructions": "",
    "name": "Subscription Added Trigger",
    "payload": {
      "description": "Base class for Stripe payloads",
      "properties": {
        "body": { "description": "The entire event payload", "title": "Body" },
        "event_type": {
          "description": "The type of event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["body", "event_type"],
      "title": "StripeBasePayload",
      "type": "object"
    },
    "slug": "STRIPE_STRIPE_SUBSCRIPTION_ADDED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "No config needed for this webhook",
      "properties": {},
      "title": "StripeWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when a subscription is deleted in Stripe",
    "instructions": "",
    "name": "Subscription Deleted Trigger",
    "payload": {
      "description": "Base class for Stripe payloads",
      "properties": {
        "body": { "description": "The entire event payload", "title": "Body" },
        "event_type": {
          "description": "The type of event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["body", "event_type"],
      "title": "StripeBasePayload",
      "type": "object"
    },
    "slug": "STRIPE_STRIPE_SUBSCRIPTION_DELETED_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for archived card webhook",
      "properties": {
        "board_id": {
          "description": "ID of the board to monitor",
          "title": "Board Id",
          "type": "string"
        }
      },
      "required": ["board_id"],
      "title": "TrelloArchivedCardConfig",
      "type": "object"
    },
    "description": "Triggered when a card is archived in the specified board",
    "instructions": "",
    "name": "Card Archived Trigger",
    "payload": {
      "description": "Data structure for archived card events",
      "properties": {
        "archived_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the card was archived",
          "title": "Archived At"
        },
        "archived_by": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Username who archived the card",
          "title": "Archived By"
        },
        "board_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the board",
          "title": "Board Id"
        },
        "board_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the board",
          "title": "Board Name"
        },
        "card_id": {
          "description": "ID of the archived card",
          "title": "Card Id",
          "type": "string"
        },
        "card_name": {
          "description": "Name/title of the card",
          "title": "Card Name",
          "type": "string"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Card description if any",
          "title": "Description"
        }
      },
      "required": ["card_id", "card_name"],
      "title": "TrelloArchivedCardPayload",
      "type": "object"
    },
    "slug": "TRELLO_TRELLO_ARCHIVED_CARD_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for activity webhook",
      "properties": {},
      "title": "TrelloNewActivityConfig",
      "type": "object"
    },
    "description": "Triggered when there is activity in Trello.",
    "instructions": "",
    "name": "New Activity Trigger",
    "payload": {
      "description": "Data structure for Trello activity events",
      "properties": {
        "action_id": {
          "description": "ID of the activity",
          "title": "Action Id",
          "type": "string"
        },
        "action_type": {
          "description": "Type of activity",
          "title": "Action Type",
          "type": "string"
        },
        "board_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the board if applicable",
          "title": "Board Id"
        },
        "board_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the board if applicable",
          "title": "Board Name"
        },
        "card_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the card if applicable",
          "title": "Card Id"
        },
        "card_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the card if applicable",
          "title": "Card Name"
        },
        "created_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the activity occurred",
          "title": "Created At"
        },
        "member_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the member who performed the action",
          "title": "Member Id"
        },
        "member_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the member who performed the action",
          "title": "Member Name"
        }
      },
      "required": ["action_id", "action_type"],
      "title": "TrelloActivityPayload",
      "type": "object"
    },
    "slug": "TRELLO_TRELLO_NEW_ACTIVITY_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for new board webhook",
      "properties": {
        "workspace_id": {
          "description": "ID of the workspace to monitor",
          "title": "Workspace Id",
          "type": "string"
        }
      },
      "required": ["workspace_id"],
      "title": "TrelloNewBoardConfig",
      "type": "object"
    },
    "description": "Triggered when a board is created in the specified workspace",
    "instructions": "",
    "name": "New Board Trigger",
    "payload": {
      "description": "Data structure for new board events",
      "properties": {
        "board_id": { "description": "ID of the new board", "title": "Board Id", "type": "string" },
        "board_name": {
          "description": "Name of the board",
          "title": "Board Name",
          "type": "string"
        },
        "created_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the board was created",
          "title": "Created At"
        },
        "created_by": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Username who created the board",
          "title": "Created By"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Board description if any",
          "title": "Description"
        }
      },
      "required": ["board_id", "board_name"],
      "title": "TrelloBoardPayload",
      "type": "object"
    },
    "slug": "TRELLO_TRELLO_NEW_BOARD_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for new card webhook",
      "properties": {
        "board_id": {
          "description": "ID of the board to monitor",
          "title": "Board Id",
          "type": "string"
        }
      },
      "required": ["board_id"],
      "title": "TrelloNewCardConfig",
      "type": "object"
    },
    "description": "Triggered when a card is created in the specified board",
    "instructions": "",
    "name": "New Card Trigger",
    "payload": {
      "description": "Data structure for new card events",
      "properties": {
        "board_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the board",
          "title": "Board Id"
        },
        "board_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the board",
          "title": "Board Name"
        },
        "card_id": { "description": "ID of the new card", "title": "Card Id", "type": "string" },
        "card_name": {
          "description": "Name/title of the card",
          "title": "Card Name",
          "type": "string"
        },
        "created_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the card was created",
          "title": "Created At"
        },
        "created_by": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Username who created the card",
          "title": "Created By"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Card description if any",
          "title": "Description"
        }
      },
      "required": ["card_id", "card_name"],
      "title": "TrelloCardPayload",
      "type": "object"
    },
    "slug": "TRELLO_TRELLO_NEW_CARD_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "description": "Configuration for card update webhook",
      "properties": {
        "card_id": {
          "description": "ID of the specific card to monitor",
          "title": "Card Id",
          "type": "string"
        }
      },
      "required": ["card_id"],
      "title": "TrelloUpdatedCardConfig",
      "type": "object"
    },
    "description": "Triggered when a specific card is updated",
    "instructions": "",
    "name": "Card Updated Trigger",
    "payload": {
      "description": "Data structure for card update events",
      "properties": {
        "board_id": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "ID of the board",
          "title": "Board Id"
        },
        "board_name": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Name of the board",
          "title": "Board Name"
        },
        "card_id": {
          "description": "ID of the updated card",
          "title": "Card Id",
          "type": "string"
        },
        "card_name": {
          "description": "Name/title of the card",
          "title": "Card Name",
          "type": "string"
        },
        "description": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Current card description",
          "title": "Description"
        },
        "new_data": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "New values of updated fields",
          "title": "New Data"
        },
        "old_data": {
          "anyOf": [{ "type": "object" }, { "type": "null" }],
          "default": null,
          "description": "Previous values of updated fields",
          "title": "Old Data"
        },
        "updated_at": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "When the card was updated",
          "title": "Updated At"
        },
        "updated_by": {
          "anyOf": [{ "type": "string" }, { "type": "null" }],
          "default": null,
          "description": "Username who updated the card",
          "title": "Updated By"
        }
      },
      "required": ["card_id", "card_name"],
      "title": "TrelloUpdatedCardPayload",
      "type": "object"
    },
    "slug": "TRELLO_TRELLO_UPDATED_CARD_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "channel_id": {
          "description": "The ID of the YouTube channel",
          "title": "Channel Id",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "required": ["channel_id"],
      "title": "NewActivityConfig",
      "type": "object"
    },
    "description": "Triggers when a new activity is detected on a YouTube channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Make sure you have authorized access to the YouTube Data API.\n    ",
    "name": "New YouTube Activity",
    "payload": {
      "description": "Payload for YouTube activity events.",
      "properties": {
        "activity": { "description": "Activity details", "title": "Activity", "type": "object" },
        "event_type": {
          "default": "new_activity",
          "description": "Type of YouTube activity event",
          "title": "Event Type",
          "type": "string"
        }
      },
      "required": ["activity"],
      "title": "ActivityPayload",
      "type": "object"
    },
    "slug": "YOUTUBE_NEW_ACTIVITY_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        },
        "playlist_id": {
          "description": "The ID of the YouTube playlist",
          "title": "Playlist Id",
          "type": "string"
        }
      },
      "required": ["playlist_id"],
      "title": "NewPlaylistItemConfig",
      "type": "object"
    },
    "description": "Triggers when a new item is added to a YouTube playlist.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Make sure you have authorized access to the YouTube Data API.\n    ",
    "name": "New Item in YouTube Playlist",
    "payload": {
      "description": "Payload for YouTube playlist item events.",
      "properties": {
        "event_type": {
          "default": "new_playlist_item",
          "description": "Type of YouTube playlist item event",
          "title": "Event Type",
          "type": "string"
        },
        "item": { "description": "Playlist item details", "title": "Item", "type": "object" }
      },
      "required": ["item"],
      "title": "PlaylistItemPayload",
      "type": "object"
    },
    "slug": "YOUTUBE_NEW_PLAYLIST_ITEM_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "channel_id": {
          "description": "The ID of the YouTube channel",
          "title": "Channel Id",
          "type": "string"
        },
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "required": ["channel_id"],
      "title": "NewPlaylistConfig",
      "type": "object"
    },
    "description": "Triggers when a new playlist is added to a YouTube channel.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Make sure you have authorized access to the YouTube Data API.\n    ",
    "name": "New Playlist in YouTube Channel",
    "payload": {
      "description": "Payload for YouTube playlist events.",
      "properties": {
        "event_type": {
          "default": "new_playlist",
          "description": "Type of YouTube playlist event",
          "title": "Event Type",
          "type": "string"
        },
        "playlist": { "description": "Playlist details", "title": "Playlist", "type": "object" }
      },
      "required": ["playlist"],
      "title": "PlaylistPayload",
      "type": "object"
    },
    "slug": "YOUTUBE_NEW_PLAYLIST_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "NewSubscriptionConfig",
      "type": "object"
    },
    "description": "Triggers when a new channel is subscribed.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n\n    - Make sure you have authorized access to the YouTube Data API.\n    ",
    "name": "New YouTube Channel Subscription",
    "payload": {
      "description": "Payload for YouTube subscription events.",
      "properties": {
        "event_type": {
          "default": "new_subscription",
          "description": "Type of YouTube subscription event",
          "title": "Event Type",
          "type": "string"
        },
        "subscription": {
          "description": "Subscription details",
          "title": "Subscription",
          "type": "object"
        }
      },
      "required": ["subscription"],
      "title": "SubscriptionPayload",
      "type": "object"
    },
    "slug": "YOUTUBE_NEW_SUBSCRIPTION_TRIGGER",
    "type": "poll"
  },
  {
    "config": {
      "properties": {
        "events": {
          "description": "The events to subscribe to.",
          "items": { "type": "string" },
          "title": "Events",
          "type": "array"
        },
        "name": { "description": "Name of the webhook.", "title": "Name", "type": "string" }
      },
      "required": ["name", "events"],
      "title": "ZendeskWebhookConfig",
      "type": "object"
    },
    "description": "Triggered when a new user is created in Zendesk.",
    "instructions": "This trigger fires every time a new user is created in Zendesk.",
    "name": "New User Created",
    "payload": {
      "properties": {
        "account_id": {
          "description": "The Zendesk account ID",
          "examples": [12514403],
          "title": "Account Id",
          "type": "integer"
        },
        "detail": {
          "description": "Detailed information about the user",
          "title": "Detail",
          "type": "object"
        },
        "event": {
          "description": "Additional event information",
          "title": "Event",
          "type": "object"
        },
        "id": {
          "description": "The event UUID",
          "examples": ["6b9bbadf-5725-4e92-bebe-7b71011bf5f1"],
          "title": "Id",
          "type": "string"
        },
        "subject": {
          "description": "The subject of the event",
          "examples": ["zen:user:6596848315901"],
          "title": "Subject",
          "type": "string"
        },
        "time": {
          "description": "The timestamp of the event",
          "examples": ["2099-07-04T05:33:18Z"],
          "title": "Time",
          "type": "string"
        },
        "type": {
          "description": "The type of the event",
          "examples": ["zen:event-type:user.created"],
          "title": "Type",
          "type": "string"
        },
        "zendesk_event_version": {
          "description": "The version of the Zendesk event",
          "examples": ["2022-06-20"],
          "title": "Zendesk Event Version",
          "type": "string"
        }
      },
      "required": [
        "type",
        "account_id",
        "id",
        "subject",
        "time",
        "zendesk_event_version",
        "detail"
      ],
      "title": "NewUserPayload",
      "type": "object"
    },
    "slug": "ZENDESK_NEW_USER_TRIGGER",
    "type": "webhook"
  },
  {
    "config": {
      "properties": {
        "interval": {
          "default": 1,
          "description": "Periodic Interval to Check for Updates & Send a Trigger in Minutes",
          "title": "Interval",
          "type": "number"
        }
      },
      "title": "ZendeskNewTicketConfig",
      "type": "object"
    },
    "description": "Triggers when a new ticket is created in a specified Zendesk view.",
    "instructions": "\n    **Instructions for Setting Up the Trigger:**\n    - Provide the view ID from your Zendesk account\n    - The trigger will monitor for new tickets in the specified view\n    ",
    "name": "New Zendesk Ticket",
    "payload": {
      "$defs": {
        "ZendeskTicketPayloadSchema": {
          "properties": {
            "assignee_id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the assignee",
              "title": "Assignee ID"
            },
            "created_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The creation timestamp",
              "title": "Created At"
            },
            "description": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The description of the ticket",
              "title": "Description"
            },
            "id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The ticket ID",
              "title": "Ticket ID"
            },
            "payload": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "The complete ticket payload",
              "title": "Payload"
            },
            "priority": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The priority of the ticket",
              "title": "Priority"
            },
            "requester_id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the requester",
              "title": "Requester ID"
            },
            "status": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The status of the ticket",
              "title": "Status"
            },
            "subject": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The subject of the ticket",
              "title": "Subject"
            },
            "updated_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The last update timestamp",
              "title": "Updated At"
            }
          },
          "title": "ZendeskTicketPayloadSchema",
          "type": "object"
        }
      },
      "description": "Payload for Zendesk ticket events.",
      "properties": {
        "event_type": {
          "default": "new_ticket",
          "description": "Type of Zendesk ticket event",
          "title": "Event Type",
          "type": "string"
        },
        "ticket": {
          "description": "Ticket details",
          "properties": {
            "assignee_id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the assignee",
              "title": "Assignee ID"
            },
            "created_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The creation timestamp",
              "title": "Created At"
            },
            "description": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The description of the ticket",
              "title": "Description"
            },
            "id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The ticket ID",
              "title": "Ticket ID"
            },
            "payload": {
              "anyOf": [{ "type": "object" }, { "type": "null" }],
              "default": null,
              "description": "The complete ticket payload",
              "title": "Payload"
            },
            "priority": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The priority of the ticket",
              "title": "Priority"
            },
            "requester_id": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "default": null,
              "description": "The ID of the requester",
              "title": "Requester ID"
            },
            "status": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The status of the ticket",
              "title": "Status"
            },
            "subject": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The subject of the ticket",
              "title": "Subject"
            },
            "updated_at": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "default": null,
              "description": "The last update timestamp",
              "title": "Updated At"
            }
          },
          "title": "ZendeskTicketPayloadSchema",
          "type": "object"
        }
      },
      "required": ["ticket"],
      "title": "TicketPayload",
      "type": "object"
    },
    "slug": "ZENDESK_NEW_ZENDESK_TICKET_TRIGGER",
    "type": "poll"
  }
]
