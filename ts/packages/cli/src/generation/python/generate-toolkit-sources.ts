/**
 * @example
 *
 * ```python
 * class ABLY:
 *     """Map of Composio's ABLY toolkit."""
 *
 *     slug: str = "ably"
 *
 *     class tools:
 *         BATCH_PRESENCE = "ABLY_BATCH_PRESENCE"
 *         BATCH_PRESENCE_HISTORY = "ABLY_BATCH_PRESENCE_HISTORY"
 *         CREATE_CHANNEL = "ABLY_CREATE_CHANNEL"
 *         DELETE_CHANNEL_SUBSCRIPTION = "ABLY_DELETE_CHANNEL_SUBSCRIPTION"
 *
 *     class triggers:
 *         pass
 * ```
 */

import { pipe, Record } from 'effect';
import type { ToolkitName } from 'src/models/toolkits';
import type { ToolkitIndex, ToolkitIndexData } from '../create-toolkit-index';

type SourceFile = [filename: string, content: string];

/**
 * Generates a list of Python source files that should be written to disk by the caller.
 */
export function generatePythonToolkitSources(index: ToolkitIndex): Array<SourceFile> {
  return pipe(index, Record.mapEntries(generatePythonToolkitSource), Record.toEntries);
}

function generatePythonToolkitSource(
  toolkit: ToolkitIndexData,
  toolkitName: ToolkitName
): SourceFile {
  const filename = `${toolkit.slug}.py`;

  const toolsEntries = (spacing: number) => {
    const spacePad = ' '.repeat(spacing);

    if (Record.size(toolkit.tools) > 0) {
      return Object.entries(toolkit.tools)
        .map(([toolName, toolValue]) => `${spacePad}${toolName} = "${toolValue}"`)
        .join('\n');
    }

    return `${spacePad}pass`;
  };

  const triggerTypesEntries = (spacing: number) => {
    const spacePad = ' '.repeat(spacing);

    if (Record.size(toolkit.triggerTypes) > 0) {
      return Object.entries(toolkit.triggerTypes)
        .map(([triggerName, triggerValue]) => `${spacePad}${triggerName} = "${triggerValue}"`)
        .join('\n');
    }

    return `${spacePad}pass`;
  };

  const filesource = `# Auto-generated by Composio CLI via \`composio py generate\`.
# Do not modify manually.

class ${toolkitName}:
    """Map of Composio's ${toolkitName} toolkit."""

    slug: str = "${toolkit.slug}"

    class tools:
${toolsEntries(8)}

    class triggers:
${triggerTypesEntries(8)}
`;

  return [filename, filesource];
}
